 It is impossible to assert the identity of meaning of two expressions. For in order to be able to assert anything about their meaning, I must know their meaning, and I cannot know their meaning without knowing whether what they mean is the same or different.
------CorefChainz
CHAIN12-["I" in sentence 2, "I" in sentence 2]
representative mention: "I" in sentence 2
CHAIN14-["meaning of two expressions" in sentence 1, "their meaning" in sentence 2, "their meaning" in sentence 2, "their meaning" in sentence 2]
representative mention: "their meaning" in sentence 2
CHAIN15-["their" in sentence 2, "their" in sentence 2, "their" in sentence 2, "they" in sentence 2]
representative mention: "their" in sentence 2
It-PRP 
is-VBZ 
impossible-JJ 
to-TO 
assert-VB 
the-DT 
identity-NN 
of-IN 
meaning-NN 
of-IN 
two-CD 
expressions-NNS 
.-. 
For-IN 
in-IN 
order-NN 
to-TO 
be-VB 
able-JJ 
to-TO 
assert-VB 
anything-NN 
about-IN 
their-PRP$ 
meaning-NN 
,-, 
I-PRP 
must-MD 
know-VB 
their-PRP$ 
meaning-NN 
,-, 
and-CC 
I-PRP 
can-MD 
not-RB 
know-VB 
their-PRP$ 
meaning-NN 
without-IN 
knowing-VBG 
whether-IN 
what-WP 
they-PRP 
mean-VBP 
is-VBZ 
the-DT 
same-JJ 
or-CC 
different-JJ 
.-. 
ROOT 	-> S 	-> S 	-> NP 	-> PRP 	-> It
		 	-> VP 	-> VBZ 	-> is
	 	-> ADJP 	-> JJ 	-> impossible
	 	-> S 	-> VP 	-> TO 	-> to
	 	-> VP 	-> VB 	-> assert
	 	-> NP 	-> NP 	-> DT 	-> the
	 	-> NN 	-> identity
		 	-> PP 	-> IN 	-> of
	 	-> NP 	-> NP 	-> NN 	-> meaning
		 	-> PP 	-> IN 	-> of
	 	-> NP 	-> CD 	-> two
	 	-> NNS 	-> expressions
											 	-> . 	-> .
		 	-> IN 	-> For
	 	-> S 	-> S 	-> SBAR 	-> IN 	-> in
	 	-> NN 	-> order
	 	-> S 	-> VP 	-> TO 	-> to
	 	-> VP 	-> VB 	-> be
	 	-> ADJP 	-> JJ 	-> able
	 	-> S 	-> VP 	-> TO 	-> to
	 	-> VP 	-> VB 	-> assert
	 	-> NP 	-> NN 	-> anything
		 	-> PP 	-> IN 	-> about
	 	-> NP 	-> PRP$ 	-> their
	 	-> NN 	-> meaning
											 	-> , 	-> ,
	 	-> NP 	-> PRP 	-> I
		 	-> VP 	-> MD 	-> must
	 	-> VP 	-> VB 	-> know
	 	-> NP 	-> PRP$ 	-> their
	 	-> NN 	-> meaning
					 	-> , 	-> ,
	 	-> CC 	-> and
	 	-> S 	-> NP 	-> PRP 	-> I
		 	-> VP 	-> MD 	-> can
	 	-> RB 	-> not
	 	-> VP 	-> VB 	-> know
	 	-> NP 	-> PRP$ 	-> their
	 	-> NN 	-> meaning
		 	-> PP 	-> IN 	-> without
	 	-> S 	-> VP 	-> VBG 	-> knowing
	 	-> SBAR 	-> IN 	-> whether
	 	-> S 	-> SBAR 	-> WHNP 	-> WP 	-> what
		 	-> S 	-> NP 	-> PRP 	-> they
		 	-> VP 	-> VBP 	-> mean
				 	-> VP 	-> VBZ 	-> is
	 	-> ADJP 	-> DT 	-> the
	 	-> JJ 	-> same
	 	-> CC 	-> or
	 	-> JJ 	-> different
												 	-> . 	-> .
			
Dependensee repr
nsubj(impossible-3, It-1)
nsubj:xsubj(assert-5, It-1)
cop(impossible-3, is-2)
root(ROOT-0, impossible-3)
mark(assert-5, to-4)
xcomp(impossible-3, assert-5)
det(identity-7, the-6)
dobj(assert-5, identity-7)
case(meaning-9, of-8)
nmod:of(identity-7, meaning-9)
case(expressions-12, of-10)
nummod(expressions-12, two-11)
nmod:of(meaning-9, expressions-12)
dep(impossible-3, For-14)
mark(able-19, in-15)
mwe(in-15, order-16)
mark(able-19, to-17)
cop(able-19, be-18)
advcl(know-29, able-19)
mark(assert-21, to-20)
xcomp(able-19, assert-21)
dobj(assert-21, anything-22)
case(meaning-25, about-23)
nmod:poss(meaning-25, their-24)
nmod:about(assert-21, meaning-25)
nsubj(know-29, I-27)
aux(know-29, must-28)
parataxis(impossible-3, know-29)
nmod:poss(meaning-31, their-30)
dobj(know-29, meaning-31)
cc(know-29, and-33)
nsubj(know-37, I-34)
aux(know-37, can-35)
neg(know-37, not-36)
parataxis(impossible-3, know-37)
conj:and(know-29, know-37)
nmod:poss(meaning-39, their-38)
dobj(know-37, meaning-39)
mark(knowing-41, without-40)
advcl(know-37, knowing-41)
mark(same-48, whether-42)
dobj(mean-45, what-43)
nsubj(mean-45, they-44)
csubj(same-48, mean-45)
csubj(different-50, mean-45)
cop(same-48, is-46)
dep(same-48, the-47)
ccomp(knowing-41, same-48)
cc(same-48, or-49)
ccomp(knowing-41, different-50)
conj:or(same-48, different-50)
---
Enhanced PLUS PLUS dependencies
---
---
---
---
Enhanced PLUS PLUS dependencies
---
---
qqroot(ROOT-0, impossible-3)
cop(impossible-3, is-2)
punct(impossible-3, .-13)
mark(assert-5, to-4)
det(identity-7, the-6)
case(meaning-9, of-8)
case(expressions-12, of-10)
nsubj(impossible-3, It-1)
nsubj:xsubj(assert-5, It-1)
xcomp(impossible-3, assert-5)
dobj(assert-5, identity-7)
nmod:of(identity-7, meaning-9)
nummod(expressions-12, two-11)
nmod:of(meaning-9, expressions-12)
---
qqroot(ROOT-0, impossible-3)
cop(impossible-3, is-2)
punct(impossible-3, .-13)
mark(assert-5, to-4)
det(identity-7, the-6)
case(meaning-9, of-8)
case(expressions-12, of-10)
nsubj(impossible-3, It-1)
nsubj:xsubj(assert-5, It-1)
xcomp(impossible-3, assert-5)
dobj(assert-5, identity-7)
nmod:of(identity-7, meaning-9)
nummod(expressions-12, two-11)
nmod:of(meaning-9, expressions-12)
root(ROOT-0, know-16)
mwe(in-2, order-3)
cop(able-6, be-5)
mark(able-6, to-4)
mark(able-6, in-2)
mark(assert-8, to-7)
case(meaning-12, about-10)
aux(know-16, must-15)
cc(know-16, and-20)
mark(know-16, For-1)
punct(know-16, ,-19)
punct(know-16, .-38)
punct(know-16, ,-13)
aux(know-24, can-22)
mark(knowing-28, without-27)
cc(same-35, or-36)
cop(same-35, is-33)
det(same-35, the-34)
mark(same-35, whether-29)
advcl:in_order(know-16, able-6)
xcomp(able-6, assert-8)
dobj(assert-8, anything-9)
nmod:poss(meaning-12, their-11)
nmod:about(anything-9, meaning-12)
nsubj(know-16, I-14)
nmod:poss(meaning-18, their-17)
dobj(know-16, meaning-18)
nsubj(know-24, I-21)
neg(know-24, not-23)
conj:and(know-16, know-24)
nmod:poss(meaning-26, their-25)
dobj(know-24, meaning-26)
advcl:without(know-24, knowing-28)
dobj(mean-32, what-30)
nsubj(mean-32, they-31)
csubj(same-35, mean-32)
csubj(different-37, mean-32)
ccomp(knowing-28, same-35)
ccomp(knowing-28, different-37)
conj:or(same-35, different-37)
G[30, 32] [?#1, ?#2, I, I, It, able, anything, assert, assert, different, expressions, identity, impossible, in order, know, know, knowing, mean, meaning, meaning, meaning, meaning, not, same, their, their, their, they, two, what]
their-poss->meaning
assert-  : to ->impossible
meaning- ->know
anything- ->meaning
?#1-the->identity
what- ->mean
two- ->expressions
their-poss->meaning
they- ->mean
their-poss->meaning
I-  : must ->know
anything- ->assert
know-and->know
meaning- ->know
?#1- ->assert
expressions-of->meaning
different- ->knowing
mean-  : is ->?#2
?#2-the->same
?#2-  : whether ->knowing
It-  : is ->impossible
able-in_order : For ->know
they- ->two
knowing-without->know
I-  : can  : can ->know
different-or->?#2
assert-  : in order  : to  : be ->able
not- ->know
It-xsubj->assert
meaning-about->anything
mean- ->different
meaning-of->?#1
------CorefChainz
CHAIN12-["I" in sentence 2, "I" in sentence 2]
representative mention: "I" in sentence 2
CHAIN14-["meaning of two expressions" in sentence 1, "their meaning" in sentence 2, "their meaning" in sentence 2, "their meaning" in sentence 2]
representative mention: "their meaning" in sentence 2
CHAIN15-["their" in sentence 2, "their" in sentence 2, "their" in sentence 2, "they" in sentence 2]
representative mention: "their" in sentence 2
