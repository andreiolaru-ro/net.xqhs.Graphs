 If, for example, two propositions 'p' and 'q' in the combination 'p z q' yield a tautology, then it is clear that q follows from p. For example, we see from the two propositions themselves that 'q' follows from 'p z q . p', but it is also possible to show it in this way: we combine them to form 'p z q . p :z: q', and then show that this is a tautology.
------CorefChainz
CHAIN18-["it" in sentence 2, "it" in sentence 2]
representative mention: "it" in sentence 2
CHAIN20-["we" in sentence 1, "we" in sentence 2]
representative mention: "we" in sentence 1
CHAIN23-["two propositions" in sentence 1, "this" in sentence 3]
representative mention: "two propositions" in sentence 1
---
Enhanced PLUS PLUS dependencies
---
---
---
---
---
Enhanced PLUS PLUS dependencies
---
---
qqroot(ROOT-0, clear-30)
case(example-4, for-3)
cc(p-9, and-11)
punct(p-9, `-8)
punct(p-9, '-10)
punct(q-13, `-12)
punct(q-13, '-14)
case(combination-17, in-15)
det(combination-17, the-16)
punct(combination-17, '-18)
punct(combination-17, '-22)
compound(q-21, p-19)
compound(q-21, z-20)
mark(yield-23, If-1)
punct(yield-23, ,-2)
punct(yield-23, ,-5)
det(tautology-25, a-24)
cop(clear-30, is-29)
punct(clear-30, ,-38)
punct(clear-30, .-56)
punct(clear-30, ,-26)
mark(follows-33, that-31)
case(p.-35, from-34)
case(example-37, For-36)
case(propositions-44, from-41)
det(propositions-44, the-42)
punct(q-48, '-49)
punct(q-48, `-47)
mark(follows-50, that-46)
case(p-53, from-51)
punct(p-53, '-52)
nmod:for(yield-23, example-4)
nummod(propositions-7, two-6)
nsubj(yield-23, propositions-7)
dep(propositions-7, p-9)
dep(propositions-7, q-13)
conj:and(p-9, q-13)
nmod:in(p-9, combination-17)
dep(combination-17, q-21)
advcl:if(clear-30, yield-23)
dobj(yield-23, tautology-25)
advmod(it-28, then-27)
nsubj(clear-30, it-28)
nsubj(follows-33, q-32)
ccomp(clear-30, follows-33)
nmod:from(follows-33, p.-35)
nmod:for(p.-35, example-37)
nsubj(see-40, we-39)
parataxis(clear-30, see-40)
nummod(propositions-44, two-43)
nmod:from(see-40, propositions-44)
nmod:npmod(propositions-44, themselves-45)
nsubj(follows-50, q-48)
ccomp(see-40, follows-50)
nmod:from(follows-50, p-53)
dep(q-55, z-54)
nmod(p-53, q-55)
---
qqroot(ROOT-0, clear-30)
case(example-4, for-3)
cc(p-9, and-11)
punct(p-9, `-8)
punct(p-9, '-10)
punct(q-13, `-12)
punct(q-13, '-14)
case(combination-17, in-15)
det(combination-17, the-16)
punct(combination-17, '-18)
punct(combination-17, '-22)
compound(q-21, p-19)
compound(q-21, z-20)
mark(yield-23, If-1)
punct(yield-23, ,-2)
punct(yield-23, ,-5)
det(tautology-25, a-24)
cop(clear-30, is-29)
punct(clear-30, ,-38)
punct(clear-30, .-56)
punct(clear-30, ,-26)
mark(follows-33, that-31)
case(p.-35, from-34)
case(example-37, For-36)
case(propositions-44, from-41)
det(propositions-44, the-42)
punct(q-48, '-49)
punct(q-48, `-47)
mark(follows-50, that-46)
case(p-53, from-51)
punct(p-53, '-52)
nmod:for(yield-23, example-4)
nummod(propositions-7, two-6)
nsubj(yield-23, propositions-7)
dep(propositions-7, p-9)
dep(propositions-7, q-13)
conj:and(p-9, q-13)
nmod:in(p-9, combination-17)
dep(combination-17, q-21)
advcl:if(clear-30, yield-23)
dobj(yield-23, tautology-25)
advmod(it-28, then-27)
nsubj(clear-30, it-28)
nsubj(follows-33, q-32)
ccomp(clear-30, follows-33)
nmod:from(follows-33, p.-35)
nmod:for(p.-35, example-37)
nsubj(see-40, we-39)
parataxis(clear-30, see-40)
nummod(propositions-44, two-43)
nmod:from(see-40, propositions-44)
nmod:npmod(propositions-44, themselves-45)
nsubj(follows-50, q-48)
ccomp(see-40, follows-50)
nmod:from(follows-50, p-53)
dep(q-55, z-54)
nmod(p-53, q-55)
root(ROOT-0, p-1)
cc(p-1, but-4)
punct(p-1, ,-3)
punct(p-1, .-25)
punct(p-1, :-15)
punct(p-1, '-2)
cop(possible-8, is-6)
mark(show-10, to-9)
case(way-14, in-12)
det(way-14, this-13)
mark(form-20, to-19)
punct(form-20, '-21)
nsubj(possible-8, it-5)
nsubj:xsubj(show-10, it-5)
advmod(possible-8, also-7)
conj:but(p-1, possible-8)
xcomp(possible-8, show-10)
dobj(show-10, it-11)
nmod:in(show-10, way-14)
nsubj(combine-17, we-16)
parataxis(p-1, combine-17)
dobj(combine-17, them-18)
nsubj:xsubj(form-20, them-18)
xcomp(combine-17, form-20)
dep(q-24, p-22)
dep(q-24, z-23)
advcl(form-20, q-24)
---
qqroot(ROOT-0, clear-30)
case(example-4, for-3)
cc(p-9, and-11)
punct(p-9, `-8)
punct(p-9, '-10)
punct(q-13, `-12)
punct(q-13, '-14)
case(combination-17, in-15)
det(combination-17, the-16)
punct(combination-17, '-18)
punct(combination-17, '-22)
compound(q-21, p-19)
compound(q-21, z-20)
mark(yield-23, If-1)
punct(yield-23, ,-2)
punct(yield-23, ,-5)
det(tautology-25, a-24)
cop(clear-30, is-29)
punct(clear-30, ,-38)
punct(clear-30, .-56)
punct(clear-30, ,-26)
mark(follows-33, that-31)
case(p.-35, from-34)
case(example-37, For-36)
case(propositions-44, from-41)
det(propositions-44, the-42)
punct(q-48, '-49)
punct(q-48, `-47)
mark(follows-50, that-46)
case(p-53, from-51)
punct(p-53, '-52)
nmod:for(yield-23, example-4)
nummod(propositions-7, two-6)
nsubj(yield-23, propositions-7)
dep(propositions-7, p-9)
dep(propositions-7, q-13)
conj:and(p-9, q-13)
nmod:in(p-9, combination-17)
dep(combination-17, q-21)
advcl:if(clear-30, yield-23)
dobj(yield-23, tautology-25)
advmod(it-28, then-27)
nsubj(clear-30, it-28)
nsubj(follows-33, q-32)
ccomp(clear-30, follows-33)
nmod:from(follows-33, p.-35)
nmod:for(p.-35, example-37)
nsubj(see-40, we-39)
parataxis(clear-30, see-40)
nummod(propositions-44, two-43)
nmod:from(see-40, propositions-44)
nmod:npmod(propositions-44, themselves-45)
nsubj(follows-50, q-48)
ccomp(see-40, follows-50)
nmod:from(follows-50, p-53)
dep(q-55, z-54)
nmod(p-53, q-55)
root(ROOT-0, p-1)
cc(p-1, but-4)
punct(p-1, ,-3)
punct(p-1, .-25)
punct(p-1, :-15)
punct(p-1, '-2)
cop(possible-8, is-6)
mark(show-10, to-9)
case(way-14, in-12)
det(way-14, this-13)
mark(form-20, to-19)
punct(form-20, '-21)
nsubj(possible-8, it-5)
nsubj:xsubj(show-10, it-5)
advmod(possible-8, also-7)
conj:but(p-1, possible-8)
xcomp(possible-8, show-10)
dobj(show-10, it-11)
nmod:in(show-10, way-14)
nsubj(combine-17, we-16)
parataxis(p-1, combine-17)
dobj(combine-17, them-18)
nsubj:xsubj(form-20, them-18)
xcomp(combine-17, form-20)
dep(q-24, p-22)
dep(q-24, z-23)
advcl(form-20, q-24)
root(ROOT-0, p-1)
punct(p-1, .-16)
punct(p-1, :-2)
cc(q-5, and-8)
punct(q-5, '-6)
punct(q-5, ,-7)
punct(q-5, :-4)
cop(tautology-15, is-13)
det(tautology-15, a-14)
mark(tautology-15, that-11)
dep(q-5, z-3)
dep(p-1, q-5)
advmod(show-10, then-9)
dep(p-1, show-10)
conj:and(q-5, show-10)
nsubj(tautology-15, this-12)
ccomp(show-10, tautology-15)
G[35, 35] [?1, ?2, ?3, ?4, ?5, clear30, combination2147483647, combine17, example4, example37, follows33, follows50, form20, it28, p9, p1, p1, p53, p.35, possible8, propositions2147483647, propositions7, q48, q13, q55, q5, q24, see40, show10, show10, tautology2147483647, tautology2147483647, way2147483647, yield23, z p q21]
example37-for : For ->p.35
yield23-if->clear30
q55- ->p53
propositions7- ->yield23
show10-  : to  : is ->possible8
?5-a->tautology2147483647
show10-and->q5
?4-in->show10
q5- ->p1
p9- ->propositions7
see40- ->clear30
q48-  : that ->follows50
follows33-  : that ->clear30
?1-a->tautology2147483647
possible8-but->p1
z p q21- ->?3
q13-and->p9
?4-this->way2147483647
it28-  : is ->clear30
?1- ->yield23
?3-the->combination2147483647
example37- ->propositions7
?3-in->p9
q13- ->propositions7
?5-  : that  : is ->show10
p.35-from->follows33
show10- ->p1
example4-for : If ->yield23
combine17- ->p1
follows50- ->see40
p53-from->follows50
q24- ->form20
form20-  : to ->combine17
?2-from->see40
?2-the->propositions2147483647
------CorefChainz
CHAIN18-["it" in sentence 2, "it" in sentence 2]
representative mention: "it" in sentence 2
CHAIN20-["we" in sentence 1, "we" in sentence 2]
representative mention: "we" in sentence 1
CHAIN23-["two propositions" in sentence 1, "this" in sentence 3]
representative mention: "two propositions" in sentence 1
