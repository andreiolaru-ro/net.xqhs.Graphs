 We might say that what is common to all symbols that affirm both p and q is the proposition 'p . q'; and that what is common to all symbols that affirm either p or q is the proposition 'p C q'. And similarly we can say that two propositions are opposed to one another if they have nothing in common with one another, and that every proposition has only one negative, since there is only one proposition that lies completely outside it. Thus in Russell's notation too it is manifest that 'q : p C Pp' says the same thing as 'q', that 'p C Pq' says nothing.
------CorefChainz
CHAIN20-["two propositions" in sentence 3, "they" in sentence 3]
representative mention: "two propositions" in sentence 3
CHAIN10-["q" in sentence 1, "q" in sentence 2]
representative mention: "q" in sentence 1
CHAIN26-["We" in sentence 1, "we" in sentence 3]
representative mention: "We" in sentence 1
CHAIN29-["every proposition" in sentence 3, "it" in sentence 3, "it" in sentence 4]
representative mention: "every proposition" in sentence 3
---
Enhanced PLUS PLUS dependencies
---
---
---
---
---
---
Enhanced PLUS PLUS dependencies
---
---
qqroot(ROOT-0, say-3)
aux(say-3, might-2)
punct(say-3, .-22)
cop(common-7, is-6)
mark(common-7, that-4)
case(symbols-10, to-8)
det(symbols-10, all-9)
cc(p-14, and-15)
cop(proposition-19, is-17)
det(proposition-19, the-18)
punct(proposition-19, '-20)
nsubj(say-3, We-1)
nsubj(common-7, what-5)
ccomp(say-3, common-7)
nmod:to(common-7, symbols-10)
nsubj(affirm-12, symbols-10)
ref(symbols-10, that-11)
acl:relcl(symbols-10, affirm-12)
cc:preconj(p-14, both-13)
dobj(affirm-12, p-14)
dobj(affirm-12, q-16)
conj:and(p-14, q-16)
ccomp(say-3, proposition-19)
dep(proposition-19, p-21)
---
qqroot(ROOT-0, say-3)
aux(say-3, might-2)
punct(say-3, .-22)
cop(common-7, is-6)
mark(common-7, that-4)
case(symbols-10, to-8)
det(symbols-10, all-9)
cc(p-14, and-15)
cop(proposition-19, is-17)
det(proposition-19, the-18)
punct(proposition-19, '-20)
nsubj(say-3, We-1)
nsubj(common-7, what-5)
ccomp(say-3, common-7)
nmod:to(common-7, symbols-10)
nsubj(affirm-12, symbols-10)
ref(symbols-10, that-11)
acl:relcl(symbols-10, affirm-12)
cc:preconj(p-14, both-13)
dobj(affirm-12, p-14)
dobj(affirm-12, q-16)
conj:and(p-14, q-16)
ccomp(say-3, proposition-19)
dep(proposition-19, p-21)
root(ROOT-0, proposition-20)
cc(q-1, and-4)
punct(q-1, ;-3)
punct(q-1, '-2)
cop(common-8, is-7)
mark(common-8, that-5)
case(symbols-11, to-9)
det(symbols-11, all-10)
cc(p-15, or-16)
cop(proposition-20, is-18)
det(proposition-20, the-19)
punct(proposition-20, '-21)
punct(proposition-20, .-26)
compound(q-24, p-22)
compound(q-24, C-23)
punct(q-24, '-25)
nsubj(proposition-20, q-1)
nsubj(common-8, what-6)
conj:and(q-1, common-8)
nsubj(proposition-20, common-8)
nmod:to(common-8, symbols-11)
nsubj(affirm-13, symbols-11)
ref(symbols-11, that-12)
acl:relcl(symbols-11, affirm-13)
cc:preconj(p-15, either-14)
dobj(affirm-13, p-15)
dobj(affirm-13, q-17)
conj:or(p-15, q-17)
dep(proposition-20, q-24)
---
qqroot(ROOT-0, say-3)
aux(say-3, might-2)
punct(say-3, .-22)
cop(common-7, is-6)
mark(common-7, that-4)
case(symbols-10, to-8)
det(symbols-10, all-9)
cc(p-14, and-15)
cop(proposition-19, is-17)
det(proposition-19, the-18)
punct(proposition-19, '-20)
nsubj(say-3, We-1)
nsubj(common-7, what-5)
ccomp(say-3, common-7)
nmod:to(common-7, symbols-10)
nsubj(affirm-12, symbols-10)
ref(symbols-10, that-11)
acl:relcl(symbols-10, affirm-12)
cc:preconj(p-14, both-13)
dobj(affirm-12, p-14)
dobj(affirm-12, q-16)
conj:and(p-14, q-16)
ccomp(say-3, proposition-19)
dep(proposition-19, p-21)
root(ROOT-0, proposition-20)
cc(q-1, and-4)
punct(q-1, ;-3)
punct(q-1, '-2)
cop(common-8, is-7)
mark(common-8, that-5)
case(symbols-11, to-9)
det(symbols-11, all-10)
cc(p-15, or-16)
cop(proposition-20, is-18)
det(proposition-20, the-19)
punct(proposition-20, '-21)
punct(proposition-20, .-26)
compound(q-24, p-22)
compound(q-24, C-23)
punct(q-24, '-25)
nsubj(proposition-20, q-1)
nsubj(common-8, what-6)
conj:and(q-1, common-8)
nsubj(proposition-20, common-8)
nmod:to(common-8, symbols-11)
nsubj(affirm-13, symbols-11)
ref(symbols-11, that-12)
acl:relcl(symbols-11, affirm-13)
cc:preconj(p-15, either-14)
dobj(affirm-13, p-15)
dobj(affirm-13, q-17)
conj:or(p-15, q-17)
dep(proposition-20, q-24)
root(ROOT-0, say-5)
aux(say-5, can-4)
cc(say-5, And-1)
punct(say-5, .-44)
auxpass(opposed-10, are-9)
cc(opposed-10, and-24)
mark(opposed-10, that-6)
punct(opposed-10, ,-23)
case(one-12, to-11)
mark(have-16, if-14)
case(common-19, in-18)
case(another-22, with-20)
det(proposition-27, every-26)
mark(has-28, that-25)
punct(has-28, ,-32)
mark(is-35, since-33)
case(it-43, outside-42)
advmod(say-5, similarly-2)
nsubj(say-5, we-3)
nummod(propositions-8, two-7)
nsubjpass(opposed-10, propositions-8)
ccomp(say-5, opposed-10)
nmod:to(opposed-10, one-12)
dep(one-12, another-13)
nsubj(have-16, they-15)
advcl:if(opposed-10, have-16)
dobj(have-16, nothing-17)
acl:in(nothing-17, common-19)
nummod(another-22, one-21)
nmod:with(common-19, another-22)
nsubj(has-28, proposition-27)
ccomp(say-5, has-28)
conj:and(opposed-10, has-28)
advmod(one-30, only-29)
nummod(negative-31, one-30)
dobj(has-28, negative-31)
expl(is-35, there-34)
advcl:since(has-28, is-35)
advmod(one-37, only-36)
nummod(proposition-38, one-37)
nsubj(is-35, proposition-38)
nsubj(lies-40, proposition-38)
ref(proposition-38, that-39)
acl:relcl(proposition-38, lies-40)
advmod(it-43, completely-41)
nmod:outside(lies-40, it-43)
---
qqroot(ROOT-0, say-3)
aux(say-3, might-2)
punct(say-3, .-22)
cop(common-7, is-6)
mark(common-7, that-4)
case(symbols-10, to-8)
det(symbols-10, all-9)
cc(p-14, and-15)
cop(proposition-19, is-17)
det(proposition-19, the-18)
punct(proposition-19, '-20)
nsubj(say-3, We-1)
nsubj(common-7, what-5)
ccomp(say-3, common-7)
nmod:to(common-7, symbols-10)
nsubj(affirm-12, symbols-10)
ref(symbols-10, that-11)
acl:relcl(symbols-10, affirm-12)
cc:preconj(p-14, both-13)
dobj(affirm-12, p-14)
dobj(affirm-12, q-16)
conj:and(p-14, q-16)
ccomp(say-3, proposition-19)
dep(proposition-19, p-21)
root(ROOT-0, proposition-20)
cc(q-1, and-4)
punct(q-1, ;-3)
punct(q-1, '-2)
cop(common-8, is-7)
mark(common-8, that-5)
case(symbols-11, to-9)
det(symbols-11, all-10)
cc(p-15, or-16)
cop(proposition-20, is-18)
det(proposition-20, the-19)
punct(proposition-20, '-21)
punct(proposition-20, .-26)
compound(q-24, p-22)
compound(q-24, C-23)
punct(q-24, '-25)
nsubj(proposition-20, q-1)
nsubj(common-8, what-6)
conj:and(q-1, common-8)
nsubj(proposition-20, common-8)
nmod:to(common-8, symbols-11)
nsubj(affirm-13, symbols-11)
ref(symbols-11, that-12)
acl:relcl(symbols-11, affirm-13)
cc:preconj(p-15, either-14)
dobj(affirm-13, p-15)
dobj(affirm-13, q-17)
conj:or(p-15, q-17)
dep(proposition-20, q-24)
root(ROOT-0, say-5)
aux(say-5, can-4)
cc(say-5, And-1)
punct(say-5, .-44)
auxpass(opposed-10, are-9)
cc(opposed-10, and-24)
mark(opposed-10, that-6)
punct(opposed-10, ,-23)
case(one-12, to-11)
mark(have-16, if-14)
case(common-19, in-18)
case(another-22, with-20)
det(proposition-27, every-26)
mark(has-28, that-25)
punct(has-28, ,-32)
mark(is-35, since-33)
case(it-43, outside-42)
advmod(say-5, similarly-2)
nsubj(say-5, we-3)
nummod(propositions-8, two-7)
nsubjpass(opposed-10, propositions-8)
ccomp(say-5, opposed-10)
nmod:to(opposed-10, one-12)
dep(one-12, another-13)
nsubj(have-16, they-15)
advcl:if(opposed-10, have-16)
dobj(have-16, nothing-17)
acl:in(nothing-17, common-19)
nummod(another-22, one-21)
nmod:with(common-19, another-22)
nsubj(has-28, proposition-27)
ccomp(say-5, has-28)
conj:and(opposed-10, has-28)
advmod(one-30, only-29)
nummod(negative-31, one-30)
dobj(has-28, negative-31)
expl(is-35, there-34)
advcl:since(has-28, is-35)
advmod(one-37, only-36)
nummod(proposition-38, one-37)
nsubj(is-35, proposition-38)
nsubj(lies-40, proposition-38)
ref(proposition-38, that-39)
acl:relcl(proposition-38, lies-40)
advmod(it-43, completely-41)
nmod:outside(lies-40, it-43)
root(ROOT-0, manifest-9)
case(Russell-3, 's-4)
case(notation-5, in-2)
cop(manifest-9, is-8)
punct(manifest-9, .-35)
mark(q-12, that-10)
punct(q-12, '-11)
punct(q-12, :-13)
compound(Pp-16, p-14)
compound(Pp-16, C-15)
punct(Pp-16, '-17)
det(thing-21, the-19)
punct(thing-21, ,-26)
case(q-24, as-22)
punct(q-24, '-25)
punct(q-24, `-23)
compound(Pq-31, p-29)
compound(Pq-31, C-30)
mark(says-33, that-27)
punct(says-33, '-28)
punct(says-33, '-32)
advmod(manifest-9, Thus-1)
nmod:poss(notation-5, Russell-3)
nmod:in(manifest-9, notation-5)
advmod(manifest-9, too-6)
nsubj(manifest-9, it-7)
ccomp(manifest-9, q-12)
nsubj(says-18, Pp-16)
parataxis(q-12, says-18)
amod(thing-21, same-20)
dobj(says-18, thing-21)
nmod:as(thing-21, q-24)
nsubj(says-33, Pq-31)
dep(thing-21, says-33)
dobj(says-33, nothing-34)
G[46, 51] [?1, ?2, ?3, ?4, ?5, ?6, C p Pp16, C p Pq31, C p q24, Russell3, affirm12, affirm13, another22, common8, common7, common19, has28, have16, is35, it43, lies40, manifest9, negative31, notation5, nothing17, one12, one30, one37, opposed10, p14, p15, proposition38, proposition2147483647, proposition2147483647, proposition2147483647, propositions8, q24, q12, q1, say5, say3, says18, says33, symbols2147483647, symbols2147483647, thing2147483647]
C p Pp16- ->says18
p14-  : and ->affirm12
proposition38- ->is35
has28- ->say5
propositions8-  : are ->opposed10
?4- ->affirm13
says33- ->?6
?4-to : is ->common8
?5-to->common7
has28-and->opposed10
C p Pq31-  : that ->says33
nothing17- ->have16
?6- ->says18
q1- ->?1
p15- ->common8
C p q24-  : is ->?1
say3-  : might ->q1
common8- ->?1
it43- ->?2
q12-  : that ->manifest9
one12-to->opposed10
one30- ->negative31
affirm13-relcl->?4
?6-the->thing2147483647
have16-if->opposed10
common19-in->nothing17
says18- ->q12
?2-  : that ->has28
?2-every->proposition2147483647
q24-as->?6
notation5-in : is ->manifest9
p15-  : or ->affirm13
?5-all->symbols2147483647
?5- ->affirm12
common7-  : that  : is ->say3
?3-  : is ->say3
affirm12-relcl->?5
common7- ->?2
negative31- ->has28
another22-with->common19
?1-the->proposition2147483647
is35-since->has28
proposition38- ->lies40
Russell3-poss : 's ->notation5
lies40-relcl->proposition38
opposed10-  : And  : can  : that ->say5
?4-all->symbols2147483647
common8-and : that ->q1
?3-the->proposition2147483647
one37- ->proposition38
it43-outside->lies40
------CorefChainz
CHAIN20-["two propositions" in sentence 3, "they" in sentence 3]
representative mention: "two propositions" in sentence 3
CHAIN10-["q" in sentence 1, "q" in sentence 2]
representative mention: "q" in sentence 1
CHAIN26-["We" in sentence 1, "we" in sentence 3]
representative mention: "We" in sentence 1
CHAIN29-["every proposition" in sentence 3, "it" in sentence 3, "it" in sentence 4]
representative mention: "every proposition" in sentence 3
