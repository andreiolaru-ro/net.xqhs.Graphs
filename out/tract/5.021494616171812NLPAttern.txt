 The arguments of functions are readily confused with the affixes of names. For both arguments and affixes enable me to recognize the meaning of the signs containing them. For example, when Russell writes '+c', the 'c' is an affix which indicates that the sign as a whole is the addition-sign for cardinal numbers. But the use of this sign is the result of arbitrary convention and it would be quite possible to choose a simple sign instead of '+c'; in 'Pp' however, 'p' is not an affix but an argument: the sense of 'Pp' cannot be understood unless the sense of 'p' has been understood already. (In the name Julius Caesar 'Julius' is an affix. An affix is always part of a description of the object to whose name we attach it: e.g. the Caesar of the Julian gens.) If I am not mistaken, Frege's theory about the meaning of propositions and functions is based on the confusion between an argument and an affix. Frege regarded the propositions of logic as names, and their arguments as the affixes of those names.
------CorefChainz
CHAIN50-["me" in sentence 2, "I" in sentence 7]
representative mention: "me" in sentence 2
CHAIN52-["the meaning of the signs containing them" in sentence 2, "the meaning of propositions and functions" in sentence 7]
representative mention: "the meaning of the signs containing them" in sentence 2
CHAIN23-["the sense of ` Pp '" in sentence 4, "the sense of ` p '" in sentence 4]
representative mention: "the sense of ` Pp '" in sentence 4
CHAIN55-["Frege 's" in sentence 7, "Frege" in sentence 8]
representative mention: "Frege 's" in sentence 7
CHAIN9-["both arguments and affixes" in sentence 2, "them" in sentence 2]
representative mention: "both arguments and affixes" in sentence 2
CHAIN43-["An affix" in sentence 6, "it" in sentence 6, "an affix" in sentence 7]
representative mention: "An affix" in sentence 6
CHAIN29-["the sign as a whole" in sentence 3, "this sign" in sentence 4, "it" in sentence 4]
representative mention: "the sign as a whole" in sentence 3
CHAIN61-["the affixes of names" in sentence 1, "the affixes of those names" in sentence 8]
representative mention: "the affixes of those names" in sentence 8
CHAIN62-["names" in sentence 1, "those names" in sentence 8]
representative mention: "those names" in sentence 8
---
Enhanced PLUS PLUS dependencies
---
---
---
---
---
---
---
---
---
---
Enhanced PLUS PLUS dependencies
---
---
qqroot(ROOT-0, confused-7)
det(arguments-2, The-1)
case(functions-4, of-3)
auxpass(confused-7, are-5)
punct(confused-7, .-13)
case(affixes-10, with-8)
det(affixes-10, the-9)
case(names-12, of-11)
nsubjpass(confused-7, arguments-2)
nmod:of(arguments-2, functions-4)
advmod(confused-7, readily-6)
nmod:with(confused-7, affixes-10)
nmod:of(affixes-10, names-12)
---
qqroot(ROOT-0, confused-7)
det(arguments-2, The-1)
case(functions-4, of-3)
auxpass(confused-7, are-5)
punct(confused-7, .-13)
case(affixes-10, with-8)
det(affixes-10, the-9)
case(names-12, of-11)
nsubjpass(confused-7, arguments-2)
nmod:of(arguments-2, functions-4)
advmod(confused-7, readily-6)
nmod:with(confused-7, affixes-10)
nmod:of(affixes-10, names-12)
root(ROOT-0, enable-6)
case(arguments-3, For-1)
cc(arguments-3, and-4)
punct(enable-6, .-17)
mark(recognize-9, to-8)
det(meaning-11, the-10)
case(signs-14, of-12)
det(signs-14, the-13)
cc:preconj(arguments-3, both-2)
nmod:for(enable-6, arguments-3)
conj:and(arguments-3, affixes-5)
nmod:for(enable-6, affixes-5)
dobj(enable-6, me-7)
nsubj:xsubj(recognize-9, me-7)
xcomp(enable-6, recognize-9)
dobj(recognize-9, meaning-11)
nmod:of(meaning-11, signs-14)
acl(signs-14, containing-15)
dobj(containing-15, them-16)
---
qqroot(ROOT-0, confused-7)
det(arguments-2, The-1)
case(functions-4, of-3)
auxpass(confused-7, are-5)
punct(confused-7, .-13)
case(affixes-10, with-8)
det(affixes-10, the-9)
case(names-12, of-11)
nsubjpass(confused-7, arguments-2)
nmod:of(arguments-2, functions-4)
advmod(confused-7, readily-6)
nmod:with(confused-7, affixes-10)
nmod:of(affixes-10, names-12)
root(ROOT-0, enable-6)
case(arguments-3, For-1)
cc(arguments-3, and-4)
punct(enable-6, .-17)
mark(recognize-9, to-8)
det(meaning-11, the-10)
case(signs-14, of-12)
det(signs-14, the-13)
cc:preconj(arguments-3, both-2)
nmod:for(enable-6, arguments-3)
conj:and(arguments-3, affixes-5)
nmod:for(enable-6, affixes-5)
dobj(enable-6, me-7)
nsubj:xsubj(recognize-9, me-7)
xcomp(enable-6, recognize-9)
dobj(recognize-9, meaning-11)
nmod:of(meaning-11, signs-14)
acl(signs-14, containing-15)
dobj(containing-15, them-16)
root(ROOT-0, affix-18)
case(example-2, For-1)
punct(writes-6, '-7)
punct(writes-6, '-10)
compound(c-9, +-8)
det(c-14, the-12)
punct(c-14, `-13)
punct(c-14, '-15)
cop(affix-18, is-16)
det(affix-18, an-17)
punct(affix-18, ,-11)
punct(affix-18, .-33)
punct(affix-18, ,-3)
det(sign-23, the-22)
case(whole-26, as-24)
det(whole-26, a-25)
cop(addition-sign-29, is-27)
det(addition-sign-29, the-28)
mark(addition-sign-29, that-21)
case(numbers-32, for-30)
nmod:for(affix-18, example-2)
advmod(writes-6, when-4)
nsubj(writes-6, Russell-5)
advcl(affix-18, writes-6)
dobj(writes-6, c-9)
nsubj(affix-18, c-14)
nsubj(indicates-20, affix-18)
ref(affix-18, which-19)
acl:relcl(affix-18, indicates-20)
nsubj(addition-sign-29, sign-23)
nmod:as(sign-23, whole-26)
ccomp(indicates-20, addition-sign-29)
amod(numbers-32, cardinal-31)
nmod:for(addition-sign-29, numbers-32)
---
qqroot(ROOT-0, confused-7)
det(arguments-2, The-1)
case(functions-4, of-3)
auxpass(confused-7, are-5)
punct(confused-7, .-13)
case(affixes-10, with-8)
det(affixes-10, the-9)
case(names-12, of-11)
nsubjpass(confused-7, arguments-2)
nmod:of(arguments-2, functions-4)
advmod(confused-7, readily-6)
nmod:with(confused-7, affixes-10)
nmod:of(affixes-10, names-12)
root(ROOT-0, enable-6)
case(arguments-3, For-1)
cc(arguments-3, and-4)
punct(enable-6, .-17)
mark(recognize-9, to-8)
det(meaning-11, the-10)
case(signs-14, of-12)
det(signs-14, the-13)
cc:preconj(arguments-3, both-2)
nmod:for(enable-6, arguments-3)
conj:and(arguments-3, affixes-5)
nmod:for(enable-6, affixes-5)
dobj(enable-6, me-7)
nsubj:xsubj(recognize-9, me-7)
xcomp(enable-6, recognize-9)
dobj(recognize-9, meaning-11)
nmod:of(meaning-11, signs-14)
acl(signs-14, containing-15)
dobj(containing-15, them-16)
root(ROOT-0, affix-18)
case(example-2, For-1)
punct(writes-6, '-7)
punct(writes-6, '-10)
compound(c-9, +-8)
det(c-14, the-12)
punct(c-14, `-13)
punct(c-14, '-15)
cop(affix-18, is-16)
det(affix-18, an-17)
punct(affix-18, ,-11)
punct(affix-18, .-33)
punct(affix-18, ,-3)
det(sign-23, the-22)
case(whole-26, as-24)
det(whole-26, a-25)
cop(addition-sign-29, is-27)
det(addition-sign-29, the-28)
mark(addition-sign-29, that-21)
case(numbers-32, for-30)
nmod:for(affix-18, example-2)
advmod(writes-6, when-4)
nsubj(writes-6, Russell-5)
advcl(affix-18, writes-6)
dobj(writes-6, c-9)
nsubj(affix-18, c-14)
nsubj(indicates-20, affix-18)
ref(affix-18, which-19)
acl:relcl(affix-18, indicates-20)
nsubj(addition-sign-29, sign-23)
nmod:as(sign-23, whole-26)
ccomp(indicates-20, addition-sign-29)
amod(numbers-32, cardinal-31)
nmod:for(addition-sign-29, numbers-32)
root(ROOT-0, result-9)
det(use-3, the-2)
case(sign-6, of-4)
det(sign-6, this-5)
cc(result-9, and-13)
cc(result-9, But-1)
cop(result-9, is-7)
det(result-9, the-8)
punct(result-9, ;-30)
punct(result-9, .-69)
case(convention-12, of-10)
aux(possible-18, would-15)
cop(possible-18, be-16)
mark(choose-20, to-19)
det(sign-23, a-21)
mwe(instead-24, of-25)
case(c-28, instead-24)
compound(c-28, +-27)
punct(c-28, '-26)
punct(c-28, '-29)
case(Pp-33, in-31)
punct(Pp-33, `-32)
punct(Pp-33, '-34)
punct(Pp-33, ,-36)
punct(Pp-33, `-37)
punct(Pp-33, '-39)
cc(affix-43, but-44)
cop(affix-43, is-40)
det(affix-43, an-42)
punct(affix-43, :-47)
det(argument-46, an-45)
det(sense-49, the-48)
case(Pp-52, of-50)
punct(Pp-52, `-51)
punct(Pp-52, '-53)
aux(understood-57, can-54)
auxpass(understood-57, be-56)
det(sense-60, the-59)
case(p-63, of-61)
punct(p-63, `-62)
punct(p-63, '-64)
aux(understood-67, has-65)
auxpass(understood-67, been-66)
mark(understood-67, unless-58)
nsubj(result-9, use-3)
nmod:of(use-3, sign-6)
amod(convention-12, arbitrary-11)
nmod:of(result-9, convention-12)
nsubj(possible-18, it-14)
nsubj:xsubj(choose-20, it-14)
advmod(possible-18, quite-17)
conj:but(result-9, possible-18)
xcomp(possible-18, choose-20)
amod(sign-23, simple-22)
dobj(choose-20, sign-23)
nmod:instead_of(choose-20, c-28)
nmod:in(affix-43, Pp-33)
advmod(Pp-33, however-35)
dep(Pp-33, p-38)
neg(affix-43, not-41)
parataxis(result-9, affix-43)
parataxis(result-9, argument-46)
conj:but(affix-43, argument-46)
nsubjpass(understood-57, sense-49)
nmod:of(sense-49, Pp-52)
neg(understood-57, not-55)
parataxis(affix-43, understood-57)
nsubjpass(understood-67, sense-60)
nmod:of(sense-60, p-63)
advcl:unless(understood-57, understood-67)
advmod(understood-67, already-68)
---
qqroot(ROOT-0, confused-7)
det(arguments-2, The-1)
case(functions-4, of-3)
auxpass(confused-7, are-5)
punct(confused-7, .-13)
case(affixes-10, with-8)
det(affixes-10, the-9)
case(names-12, of-11)
nsubjpass(confused-7, arguments-2)
nmod:of(arguments-2, functions-4)
advmod(confused-7, readily-6)
nmod:with(confused-7, affixes-10)
nmod:of(affixes-10, names-12)
root(ROOT-0, enable-6)
case(arguments-3, For-1)
cc(arguments-3, and-4)
punct(enable-6, .-17)
mark(recognize-9, to-8)
det(meaning-11, the-10)
case(signs-14, of-12)
det(signs-14, the-13)
cc:preconj(arguments-3, both-2)
nmod:for(enable-6, arguments-3)
conj:and(arguments-3, affixes-5)
nmod:for(enable-6, affixes-5)
dobj(enable-6, me-7)
nsubj:xsubj(recognize-9, me-7)
xcomp(enable-6, recognize-9)
dobj(recognize-9, meaning-11)
nmod:of(meaning-11, signs-14)
acl(signs-14, containing-15)
dobj(containing-15, them-16)
root(ROOT-0, affix-18)
case(example-2, For-1)
punct(writes-6, '-7)
punct(writes-6, '-10)
compound(c-9, +-8)
det(c-14, the-12)
punct(c-14, `-13)
punct(c-14, '-15)
cop(affix-18, is-16)
det(affix-18, an-17)
punct(affix-18, ,-11)
punct(affix-18, .-33)
punct(affix-18, ,-3)
det(sign-23, the-22)
case(whole-26, as-24)
det(whole-26, a-25)
cop(addition-sign-29, is-27)
det(addition-sign-29, the-28)
mark(addition-sign-29, that-21)
case(numbers-32, for-30)
nmod:for(affix-18, example-2)
advmod(writes-6, when-4)
nsubj(writes-6, Russell-5)
advcl(affix-18, writes-6)
dobj(writes-6, c-9)
nsubj(affix-18, c-14)
nsubj(indicates-20, affix-18)
ref(affix-18, which-19)
acl:relcl(affix-18, indicates-20)
nsubj(addition-sign-29, sign-23)
nmod:as(sign-23, whole-26)
ccomp(indicates-20, addition-sign-29)
amod(numbers-32, cardinal-31)
nmod:for(addition-sign-29, numbers-32)
root(ROOT-0, result-9)
det(use-3, the-2)
case(sign-6, of-4)
det(sign-6, this-5)
cc(result-9, and-13)
cc(result-9, But-1)
cop(result-9, is-7)
det(result-9, the-8)
punct(result-9, ;-30)
punct(result-9, .-69)
case(convention-12, of-10)
aux(possible-18, would-15)
cop(possible-18, be-16)
mark(choose-20, to-19)
det(sign-23, a-21)
mwe(instead-24, of-25)
case(c-28, instead-24)
compound(c-28, +-27)
punct(c-28, '-26)
punct(c-28, '-29)
case(Pp-33, in-31)
punct(Pp-33, `-32)
punct(Pp-33, '-34)
punct(Pp-33, ,-36)
punct(Pp-33, `-37)
punct(Pp-33, '-39)
cc(affix-43, but-44)
cop(affix-43, is-40)
det(affix-43, an-42)
punct(affix-43, :-47)
det(argument-46, an-45)
det(sense-49, the-48)
case(Pp-52, of-50)
punct(Pp-52, `-51)
punct(Pp-52, '-53)
aux(understood-57, can-54)
auxpass(understood-57, be-56)
det(sense-60, the-59)
case(p-63, of-61)
punct(p-63, `-62)
punct(p-63, '-64)
aux(understood-67, has-65)
auxpass(understood-67, been-66)
mark(understood-67, unless-58)
nsubj(result-9, use-3)
nmod:of(use-3, sign-6)
amod(convention-12, arbitrary-11)
nmod:of(result-9, convention-12)
nsubj(possible-18, it-14)
nsubj:xsubj(choose-20, it-14)
advmod(possible-18, quite-17)
conj:but(result-9, possible-18)
xcomp(possible-18, choose-20)
amod(sign-23, simple-22)
dobj(choose-20, sign-23)
nmod:instead_of(choose-20, c-28)
nmod:in(affix-43, Pp-33)
advmod(Pp-33, however-35)
dep(Pp-33, p-38)
neg(affix-43, not-41)
parataxis(result-9, affix-43)
parataxis(result-9, argument-46)
conj:but(affix-43, argument-46)
nsubjpass(understood-57, sense-49)
nmod:of(sense-49, Pp-52)
neg(understood-57, not-55)
parataxis(affix-43, understood-57)
nsubjpass(understood-67, sense-60)
nmod:of(sense-60, p-63)
advcl:unless(understood-57, understood-67)
advmod(understood-67, already-68)
root(ROOT-0, affix-12)
case(Julius-8, In-2)
compound(Julius-8, name-4)
compound(Julius-8, Julius-5)
compound(Julius-8, Caesar-6)
det(Julius-8, the-3)
punct(Julius-8, `-7)
cop(affix-12, is-10)
det(affix-12, an-11)
punct(affix-12, .-13)
punct(affix-12, -LRB--1)
punct(affix-12, '-9)
nmod:in(affix-12, Julius-8)
---
qqroot(ROOT-0, confused-7)
det(arguments-2, The-1)
case(functions-4, of-3)
auxpass(confused-7, are-5)
punct(confused-7, .-13)
case(affixes-10, with-8)
det(affixes-10, the-9)
case(names-12, of-11)
nsubjpass(confused-7, arguments-2)
nmod:of(arguments-2, functions-4)
advmod(confused-7, readily-6)
nmod:with(confused-7, affixes-10)
nmod:of(affixes-10, names-12)
root(ROOT-0, enable-6)
case(arguments-3, For-1)
cc(arguments-3, and-4)
punct(enable-6, .-17)
mark(recognize-9, to-8)
det(meaning-11, the-10)
case(signs-14, of-12)
det(signs-14, the-13)
cc:preconj(arguments-3, both-2)
nmod:for(enable-6, arguments-3)
conj:and(arguments-3, affixes-5)
nmod:for(enable-6, affixes-5)
dobj(enable-6, me-7)
nsubj:xsubj(recognize-9, me-7)
xcomp(enable-6, recognize-9)
dobj(recognize-9, meaning-11)
nmod:of(meaning-11, signs-14)
acl(signs-14, containing-15)
dobj(containing-15, them-16)
root(ROOT-0, affix-18)
case(example-2, For-1)
punct(writes-6, '-7)
punct(writes-6, '-10)
compound(c-9, +-8)
det(c-14, the-12)
punct(c-14, `-13)
punct(c-14, '-15)
cop(affix-18, is-16)
det(affix-18, an-17)
punct(affix-18, ,-11)
punct(affix-18, .-33)
punct(affix-18, ,-3)
det(sign-23, the-22)
case(whole-26, as-24)
det(whole-26, a-25)
cop(addition-sign-29, is-27)
det(addition-sign-29, the-28)
mark(addition-sign-29, that-21)
case(numbers-32, for-30)
nmod:for(affix-18, example-2)
advmod(writes-6, when-4)
nsubj(writes-6, Russell-5)
advcl(affix-18, writes-6)
dobj(writes-6, c-9)
nsubj(affix-18, c-14)
nsubj(indicates-20, affix-18)
ref(affix-18, which-19)
acl:relcl(affix-18, indicates-20)
nsubj(addition-sign-29, sign-23)
nmod:as(sign-23, whole-26)
ccomp(indicates-20, addition-sign-29)
amod(numbers-32, cardinal-31)
nmod:for(addition-sign-29, numbers-32)
root(ROOT-0, result-9)
det(use-3, the-2)
case(sign-6, of-4)
det(sign-6, this-5)
cc(result-9, and-13)
cc(result-9, But-1)
cop(result-9, is-7)
det(result-9, the-8)
punct(result-9, ;-30)
punct(result-9, .-69)
case(convention-12, of-10)
aux(possible-18, would-15)
cop(possible-18, be-16)
mark(choose-20, to-19)
det(sign-23, a-21)
mwe(instead-24, of-25)
case(c-28, instead-24)
compound(c-28, +-27)
punct(c-28, '-26)
punct(c-28, '-29)
case(Pp-33, in-31)
punct(Pp-33, `-32)
punct(Pp-33, '-34)
punct(Pp-33, ,-36)
punct(Pp-33, `-37)
punct(Pp-33, '-39)
cc(affix-43, but-44)
cop(affix-43, is-40)
det(affix-43, an-42)
punct(affix-43, :-47)
det(argument-46, an-45)
det(sense-49, the-48)
case(Pp-52, of-50)
punct(Pp-52, `-51)
punct(Pp-52, '-53)
aux(understood-57, can-54)
auxpass(understood-57, be-56)
det(sense-60, the-59)
case(p-63, of-61)
punct(p-63, `-62)
punct(p-63, '-64)
aux(understood-67, has-65)
auxpass(understood-67, been-66)
mark(understood-67, unless-58)
nsubj(result-9, use-3)
nmod:of(use-3, sign-6)
amod(convention-12, arbitrary-11)
nmod:of(result-9, convention-12)
nsubj(possible-18, it-14)
nsubj:xsubj(choose-20, it-14)
advmod(possible-18, quite-17)
conj:but(result-9, possible-18)
xcomp(possible-18, choose-20)
amod(sign-23, simple-22)
dobj(choose-20, sign-23)
nmod:instead_of(choose-20, c-28)
nmod:in(affix-43, Pp-33)
advmod(Pp-33, however-35)
dep(Pp-33, p-38)
neg(affix-43, not-41)
parataxis(result-9, affix-43)
parataxis(result-9, argument-46)
conj:but(affix-43, argument-46)
nsubjpass(understood-57, sense-49)
nmod:of(sense-49, Pp-52)
neg(understood-57, not-55)
parataxis(affix-43, understood-57)
nsubjpass(understood-67, sense-60)
nmod:of(sense-60, p-63)
advcl:unless(understood-57, understood-67)
advmod(understood-67, already-68)
root(ROOT-0, affix-12)
case(Julius-8, In-2)
compound(Julius-8, name-4)
compound(Julius-8, Julius-5)
compound(Julius-8, Caesar-6)
det(Julius-8, the-3)
punct(Julius-8, `-7)
cop(affix-12, is-10)
det(affix-12, an-11)
punct(affix-12, .-13)
punct(affix-12, -LRB--1)
punct(affix-12, '-9)
nmod:in(affix-12, Julius-8)
root(ROOT-0, part-5)
det(affix-2, An-1)
cop(part-5, is-3)
punct(part-5, :-18)
punct(part-5, .-26)
punct(part-5, -RRB--27)
case(description-8, of-6)
det(description-8, a-7)
case(object-11, of-9)
det(object-11, the-10)
case(name-14, to-12)
det(Caesar-21, the-20)
case(gens-25, of-22)
compound(gens-25, Julian-24)
det(gens-25, the-23)
nsubj(part-5, affix-2)
advmod(part-5, always-4)
nmod:of(part-5, description-8)
nmod:of(description-8, object-11)
nmod:poss(name-14, whose-13)
nmod:to(object-11, name-14)
nsubj(attach-16, we-15)
acl:relcl(part-5, attach-16)
dobj(attach-16, it-17)
dep(Caesar-21, e.g.-19)
parataxis(part-5, Caesar-21)
nmod:of(Caesar-21, gens-25)
---
qqroot(ROOT-0, confused-7)
det(arguments-2, The-1)
case(functions-4, of-3)
auxpass(confused-7, are-5)
punct(confused-7, .-13)
case(affixes-10, with-8)
det(affixes-10, the-9)
case(names-12, of-11)
nsubjpass(confused-7, arguments-2)
nmod:of(arguments-2, functions-4)
advmod(confused-7, readily-6)
nmod:with(confused-7, affixes-10)
nmod:of(affixes-10, names-12)
root(ROOT-0, enable-6)
case(arguments-3, For-1)
cc(arguments-3, and-4)
punct(enable-6, .-17)
mark(recognize-9, to-8)
det(meaning-11, the-10)
case(signs-14, of-12)
det(signs-14, the-13)
cc:preconj(arguments-3, both-2)
nmod:for(enable-6, arguments-3)
conj:and(arguments-3, affixes-5)
nmod:for(enable-6, affixes-5)
dobj(enable-6, me-7)
nsubj:xsubj(recognize-9, me-7)
xcomp(enable-6, recognize-9)
dobj(recognize-9, meaning-11)
nmod:of(meaning-11, signs-14)
acl(signs-14, containing-15)
dobj(containing-15, them-16)
root(ROOT-0, affix-18)
case(example-2, For-1)
punct(writes-6, '-7)
punct(writes-6, '-10)
compound(c-9, +-8)
det(c-14, the-12)
punct(c-14, `-13)
punct(c-14, '-15)
cop(affix-18, is-16)
det(affix-18, an-17)
punct(affix-18, ,-11)
punct(affix-18, .-33)
punct(affix-18, ,-3)
det(sign-23, the-22)
case(whole-26, as-24)
det(whole-26, a-25)
cop(addition-sign-29, is-27)
det(addition-sign-29, the-28)
mark(addition-sign-29, that-21)
case(numbers-32, for-30)
nmod:for(affix-18, example-2)
advmod(writes-6, when-4)
nsubj(writes-6, Russell-5)
advcl(affix-18, writes-6)
dobj(writes-6, c-9)
nsubj(affix-18, c-14)
nsubj(indicates-20, affix-18)
ref(affix-18, which-19)
acl:relcl(affix-18, indicates-20)
nsubj(addition-sign-29, sign-23)
nmod:as(sign-23, whole-26)
ccomp(indicates-20, addition-sign-29)
amod(numbers-32, cardinal-31)
nmod:for(addition-sign-29, numbers-32)
root(ROOT-0, result-9)
det(use-3, the-2)
case(sign-6, of-4)
det(sign-6, this-5)
cc(result-9, and-13)
cc(result-9, But-1)
cop(result-9, is-7)
det(result-9, the-8)
punct(result-9, ;-30)
punct(result-9, .-69)
case(convention-12, of-10)
aux(possible-18, would-15)
cop(possible-18, be-16)
mark(choose-20, to-19)
det(sign-23, a-21)
mwe(instead-24, of-25)
case(c-28, instead-24)
compound(c-28, +-27)
punct(c-28, '-26)
punct(c-28, '-29)
case(Pp-33, in-31)
punct(Pp-33, `-32)
punct(Pp-33, '-34)
punct(Pp-33, ,-36)
punct(Pp-33, `-37)
punct(Pp-33, '-39)
cc(affix-43, but-44)
cop(affix-43, is-40)
det(affix-43, an-42)
punct(affix-43, :-47)
det(argument-46, an-45)
det(sense-49, the-48)
case(Pp-52, of-50)
punct(Pp-52, `-51)
punct(Pp-52, '-53)
aux(understood-57, can-54)
auxpass(understood-57, be-56)
det(sense-60, the-59)
case(p-63, of-61)
punct(p-63, `-62)
punct(p-63, '-64)
aux(understood-67, has-65)
auxpass(understood-67, been-66)
mark(understood-67, unless-58)
nsubj(result-9, use-3)
nmod:of(use-3, sign-6)
amod(convention-12, arbitrary-11)
nmod:of(result-9, convention-12)
nsubj(possible-18, it-14)
nsubj:xsubj(choose-20, it-14)
advmod(possible-18, quite-17)
conj:but(result-9, possible-18)
xcomp(possible-18, choose-20)
amod(sign-23, simple-22)
dobj(choose-20, sign-23)
nmod:instead_of(choose-20, c-28)
nmod:in(affix-43, Pp-33)
advmod(Pp-33, however-35)
dep(Pp-33, p-38)
neg(affix-43, not-41)
parataxis(result-9, affix-43)
parataxis(result-9, argument-46)
conj:but(affix-43, argument-46)
nsubjpass(understood-57, sense-49)
nmod:of(sense-49, Pp-52)
neg(understood-57, not-55)
parataxis(affix-43, understood-57)
nsubjpass(understood-67, sense-60)
nmod:of(sense-60, p-63)
advcl:unless(understood-57, understood-67)
advmod(understood-67, already-68)
root(ROOT-0, affix-12)
case(Julius-8, In-2)
compound(Julius-8, name-4)
compound(Julius-8, Julius-5)
compound(Julius-8, Caesar-6)
det(Julius-8, the-3)
punct(Julius-8, `-7)
cop(affix-12, is-10)
det(affix-12, an-11)
punct(affix-12, .-13)
punct(affix-12, -LRB--1)
punct(affix-12, '-9)
nmod:in(affix-12, Julius-8)
root(ROOT-0, part-5)
det(affix-2, An-1)
cop(part-5, is-3)
punct(part-5, :-18)
punct(part-5, .-26)
punct(part-5, -RRB--27)
case(description-8, of-6)
det(description-8, a-7)
case(object-11, of-9)
det(object-11, the-10)
case(name-14, to-12)
det(Caesar-21, the-20)
case(gens-25, of-22)
compound(gens-25, Julian-24)
det(gens-25, the-23)
nsubj(part-5, affix-2)
advmod(part-5, always-4)
nmod:of(part-5, description-8)
nmod:of(description-8, object-11)
nmod:poss(name-14, whose-13)
nmod:to(object-11, name-14)
nsubj(attach-16, we-15)
acl:relcl(part-5, attach-16)
dobj(attach-16, it-17)
dep(Caesar-21, e.g.-19)
parataxis(part-5, Caesar-21)
nmod:of(Caesar-21, gens-25)
root(ROOT-0, based-18)
cop(mistaken-5, am-3)
mark(mistaken-5, If-1)
case(Frege-7, 's-8)
case(meaning-12, about-10)
det(meaning-12, the-11)
case(propositions-14, of-13)
cc(propositions-14, and-15)
auxpass(based-18, is-17)
punct(based-18, ,-6)
punct(based-18, .-28)
case(confusion-21, on-19)
det(confusion-21, the-20)
case(argument-24, between-22)
cc(argument-24, and-25)
det(argument-24, an-23)
det(affix-27, an-26)
nsubj(mistaken-5, I-2)
neg(mistaken-5, not-4)
advcl:if(based-18, mistaken-5)
nmod:poss(theory-9, Frege-7)
nsubjpass(based-18, theory-9)
nmod:about(theory-9, meaning-12)
nmod:of(meaning-12, propositions-14)
nmod:of(meaning-12, functions-16)
conj:and(propositions-14, functions-16)
nmod:on(based-18, confusion-21)
nmod:between(confusion-21, argument-24)
nmod:between(confusion-21, affix-27)
conj:and(argument-24, affix-27)
---
qqroot(ROOT-0, confused-7)
det(arguments-2, The-1)
case(functions-4, of-3)
auxpass(confused-7, are-5)
punct(confused-7, .-13)
case(affixes-10, with-8)
det(affixes-10, the-9)
case(names-12, of-11)
nsubjpass(confused-7, arguments-2)
nmod:of(arguments-2, functions-4)
advmod(confused-7, readily-6)
nmod:with(confused-7, affixes-10)
nmod:of(affixes-10, names-12)
root(ROOT-0, enable-6)
case(arguments-3, For-1)
cc(arguments-3, and-4)
punct(enable-6, .-17)
mark(recognize-9, to-8)
det(meaning-11, the-10)
case(signs-14, of-12)
det(signs-14, the-13)
cc:preconj(arguments-3, both-2)
nmod:for(enable-6, arguments-3)
conj:and(arguments-3, affixes-5)
nmod:for(enable-6, affixes-5)
dobj(enable-6, me-7)
nsubj:xsubj(recognize-9, me-7)
xcomp(enable-6, recognize-9)
dobj(recognize-9, meaning-11)
nmod:of(meaning-11, signs-14)
acl(signs-14, containing-15)
dobj(containing-15, them-16)
root(ROOT-0, affix-18)
case(example-2, For-1)
punct(writes-6, '-7)
punct(writes-6, '-10)
compound(c-9, +-8)
det(c-14, the-12)
punct(c-14, `-13)
punct(c-14, '-15)
cop(affix-18, is-16)
det(affix-18, an-17)
punct(affix-18, ,-11)
punct(affix-18, .-33)
punct(affix-18, ,-3)
det(sign-23, the-22)
case(whole-26, as-24)
det(whole-26, a-25)
cop(addition-sign-29, is-27)
det(addition-sign-29, the-28)
mark(addition-sign-29, that-21)
case(numbers-32, for-30)
nmod:for(affix-18, example-2)
advmod(writes-6, when-4)
nsubj(writes-6, Russell-5)
advcl(affix-18, writes-6)
dobj(writes-6, c-9)
nsubj(affix-18, c-14)
nsubj(indicates-20, affix-18)
ref(affix-18, which-19)
acl:relcl(affix-18, indicates-20)
nsubj(addition-sign-29, sign-23)
nmod:as(sign-23, whole-26)
ccomp(indicates-20, addition-sign-29)
amod(numbers-32, cardinal-31)
nmod:for(addition-sign-29, numbers-32)
root(ROOT-0, result-9)
det(use-3, the-2)
case(sign-6, of-4)
det(sign-6, this-5)
cc(result-9, and-13)
cc(result-9, But-1)
cop(result-9, is-7)
det(result-9, the-8)
punct(result-9, ;-30)
punct(result-9, .-69)
case(convention-12, of-10)
aux(possible-18, would-15)
cop(possible-18, be-16)
mark(choose-20, to-19)
det(sign-23, a-21)
mwe(instead-24, of-25)
case(c-28, instead-24)
compound(c-28, +-27)
punct(c-28, '-26)
punct(c-28, '-29)
case(Pp-33, in-31)
punct(Pp-33, `-32)
punct(Pp-33, '-34)
punct(Pp-33, ,-36)
punct(Pp-33, `-37)
punct(Pp-33, '-39)
cc(affix-43, but-44)
cop(affix-43, is-40)
det(affix-43, an-42)
punct(affix-43, :-47)
det(argument-46, an-45)
det(sense-49, the-48)
case(Pp-52, of-50)
punct(Pp-52, `-51)
punct(Pp-52, '-53)
aux(understood-57, can-54)
auxpass(understood-57, be-56)
det(sense-60, the-59)
case(p-63, of-61)
punct(p-63, `-62)
punct(p-63, '-64)
aux(understood-67, has-65)
auxpass(understood-67, been-66)
mark(understood-67, unless-58)
nsubj(result-9, use-3)
nmod:of(use-3, sign-6)
amod(convention-12, arbitrary-11)
nmod:of(result-9, convention-12)
nsubj(possible-18, it-14)
nsubj:xsubj(choose-20, it-14)
advmod(possible-18, quite-17)
conj:but(result-9, possible-18)
xcomp(possible-18, choose-20)
amod(sign-23, simple-22)
dobj(choose-20, sign-23)
nmod:instead_of(choose-20, c-28)
nmod:in(affix-43, Pp-33)
advmod(Pp-33, however-35)
dep(Pp-33, p-38)
neg(affix-43, not-41)
parataxis(result-9, affix-43)
parataxis(result-9, argument-46)
conj:but(affix-43, argument-46)
nsubjpass(understood-57, sense-49)
nmod:of(sense-49, Pp-52)
neg(understood-57, not-55)
parataxis(affix-43, understood-57)
nsubjpass(understood-67, sense-60)
nmod:of(sense-60, p-63)
advcl:unless(understood-57, understood-67)
advmod(understood-67, already-68)
root(ROOT-0, affix-12)
case(Julius-8, In-2)
compound(Julius-8, name-4)
compound(Julius-8, Julius-5)
compound(Julius-8, Caesar-6)
det(Julius-8, the-3)
punct(Julius-8, `-7)
cop(affix-12, is-10)
det(affix-12, an-11)
punct(affix-12, .-13)
punct(affix-12, -LRB--1)
punct(affix-12, '-9)
nmod:in(affix-12, Julius-8)
root(ROOT-0, part-5)
det(affix-2, An-1)
cop(part-5, is-3)
punct(part-5, :-18)
punct(part-5, .-26)
punct(part-5, -RRB--27)
case(description-8, of-6)
det(description-8, a-7)
case(object-11, of-9)
det(object-11, the-10)
case(name-14, to-12)
det(Caesar-21, the-20)
case(gens-25, of-22)
compound(gens-25, Julian-24)
det(gens-25, the-23)
nsubj(part-5, affix-2)
advmod(part-5, always-4)
nmod:of(part-5, description-8)
nmod:of(description-8, object-11)
nmod:poss(name-14, whose-13)
nmod:to(object-11, name-14)
nsubj(attach-16, we-15)
acl:relcl(part-5, attach-16)
dobj(attach-16, it-17)
dep(Caesar-21, e.g.-19)
parataxis(part-5, Caesar-21)
nmod:of(Caesar-21, gens-25)
root(ROOT-0, based-18)
cop(mistaken-5, am-3)
mark(mistaken-5, If-1)
case(Frege-7, 's-8)
case(meaning-12, about-10)
det(meaning-12, the-11)
case(propositions-14, of-13)
cc(propositions-14, and-15)
auxpass(based-18, is-17)
punct(based-18, ,-6)
punct(based-18, .-28)
case(confusion-21, on-19)
det(confusion-21, the-20)
case(argument-24, between-22)
cc(argument-24, and-25)
det(argument-24, an-23)
det(affix-27, an-26)
nsubj(mistaken-5, I-2)
neg(mistaken-5, not-4)
advcl:if(based-18, mistaken-5)
nmod:poss(theory-9, Frege-7)
nsubjpass(based-18, theory-9)
nmod:about(theory-9, meaning-12)
nmod:of(meaning-12, propositions-14)
nmod:of(meaning-12, functions-16)
conj:and(propositions-14, functions-16)
nmod:on(based-18, confusion-21)
nmod:between(confusion-21, argument-24)
nmod:between(confusion-21, affix-27)
conj:and(argument-24, affix-27)
root(ROOT-0, regarded-2)
cc(regarded-2, and-10)
punct(regarded-2, ,-9)
punct(regarded-2, .-19)
det(propositions-4, the-3)
case(logic-6, of-5)
case(names-8, as-7)
case(affixes-15, as-13)
det(affixes-15, the-14)
case(names-18, of-16)
det(names-18, those-17)
nsubj(regarded-2, Frege-1)
dobj(regarded-2, propositions-4)
nmod:of(propositions-4, logic-6)
nmod:as(regarded-2, names-8)
nmod:poss(arguments-12, their-11)
conj:and(regarded-2, arguments-12)
nmod:as(arguments-12, affixes-15)
nmod:of(affixes-15, names-18)
G[124, 133] [+ c28, + c9, ?1, ?2, ?3, ?4, ?5, ?6, ?7, ?8, ?9, ?10, ?11, ?12, ?13, ?14, ?15, ?16, ?17, ?18, ?19, ?20, ?21, ?22, ?23, ?24, ?25, ?26, ?27, ?28, ?29, ?30, ?31, Caesar2147483647, Caesar Julius name Julius2147483647, Frege1, Frege7, I2, Julian gens2147483647, Pp33, Pp52, Russell5, addition-sign2147483647, affix2147483647, affix2147483647, affix2147483647, affix2147483647, affix2147483647, affixes5, affixes2147483647, affixes2147483647, already68, always4, arbitrary11, argument2147483647, argument2147483647, arguments2147483647, arguments3, arguments12, attach16, based18, both2, c2147483647, cardinal31, choose20, confused7, confusion2147483647, containing15, convention12, description2147483647, e.g.19, enable6, example2, functions4, functions16, however35, indicates20, instead of24, it17, it14, logic6, me7, meaning2147483647, meaning2147483647, mistaken5, name14, names2147483647, names8, names12, not55, not41, not4, numbers32, object2147483647, p38, p63, part5, possible18, propositions2147483647, propositions14, quite17, readily6, recognize9, regarded2, result2147483647, sense2147483647, sense2147483647, sign2147483647, sign2147483647, sign2147483647, signs2147483647, simple22, their11, them16, theory9, understood67, understood57, use2147483647, we15, when4, which19, whole2147483647, whose13, writes6]
?9- ->recognize9
names12-of->?19
convention12-of : and ->?31
name14-to->?20
?4- ->indicates20
+ c28-instead_of : instead of ->choose20
Frege1- ->regarded2
?16- ->understood67
?27-An->affix2147483647
Frege1- ->confused7
arguments12-and->regarded2
?23-between->?25
arbitrary11- ->convention12
it17- ->attach16
affixes5-and->arguments3
indicates20-relcl->?4
not41-  : is ->?13
?1-this->sign2147483647
?8- ->?2
?26-an->argument2147483647
understood57- ->?13
when4- ->writes6
?3-The->arguments2147483647
it14-xsubj->choose20
?30-the->c2147483647
?13- ->?31
?11-the->propositions2147483647
?21-the->sense2147483647
?7-the->signs2147483647
example2-for : For ->?4
?14-in : In ->?8
?14-the->Caesar Julius name Julius2147483647
?8-  : is ->?9
Russell5- ->writes6
quite17-  : be ->possible18
?8-an->affix2147483647
?11- ->regarded2
logic6-of->?11
?26-but->?13
attach16-relcl->part5
?4-an->affix2147483647
?20-of->?28
I2- ->confused7
both2-preconj : For ->arguments3
names8-as->regarded2
?1- ->?6
?7-of->?9
understood67-unless->understood57
?21- ->understood57
I2-  : If  : am  : am ->mistaken5
quite17- ->I2
?9-the->meaning2147483647
?24-the->Caesar2147483647
?31-the->result2147483647
?5-of->?24
functions4-of->?3
?22-the->use2147483647
?17-  : that ->indicates20
Frege7-poss : 's ->theory9
?12- ->choose20
readily6-  : are ->confused7
we15- ->attach16
writes6- ->?4
?28-of->part5
functions16-of->?18
p63-of->?16
affixes5-for->enable6
?15-as->?6
?6-  : is ->?17
?17-the->addition-sign2147483647
however35- ->Pp33
?10- ->I2
?10-an->affix2147483647
?27-  : is  : is ->part5
?18-the->meaning2147483647
?24- ->part5
?13-an->affix2147483647
them16- ->containing15
?30-  : is ->?4
?23-an->argument2147483647
?10-between->?25
containing15- ->?7
choose20-  : to ->possible18
numbers32-for->?17
Pp33-in->?13
?19- ->containing15
?10-and->?23
cardinal31- ->numbers32
not4- ->mistaken5
?1-of->?22
theory9- ->based18
possible18-but->?31
?25-the->confusion2147483647
which19- ->?4
?26- ->?31
?6-the->sign2147483647
functions16-and->propositions14
?5-the->Julian gens2147483647
?19-with->confused7
?22-  : But  : is ->?31
?2-of->?29
always4- ->part5
?29-the->affixes2147483647
+ c9- ->writes6
e.g.19- ->?24
?2-those->names2147483647
?15-a->whole2147483647
?29-as->arguments12
simple22- ->?12
not55-  : can  : be ->understood57
Pp52-of->?21
p38- ->Pp33
it14-  : would ->possible18
arguments3-for->enable6
?16-the->sense2147483647
mistaken5-if->based18
them16- ->arguments3
propositions14-of->?18
their11-poss->arguments12
?3- ->confused7
?18-about->theory9
whose13-poss->name14
?28-a->description2147483647
?16- ->?21
?7- ->?6
recognize9- ->enable6
?12-a->sign2147483647
already68-  : has  : been ->understood67
?19-the->affixes2147483647
me7-xsubj : to ->recognize9
me7- ->enable6
?25-on : is ->based18
?20-the->object2147483647
------CorefChainz
CHAIN50-["me" in sentence 2, "I" in sentence 7]
representative mention: "me" in sentence 2
CHAIN52-["the meaning of the signs containing them" in sentence 2, "the meaning of propositions and functions" in sentence 7]
representative mention: "the meaning of the signs containing them" in sentence 2
CHAIN23-["the sense of ` Pp '" in sentence 4, "the sense of ` p '" in sentence 4]
representative mention: "the sense of ` Pp '" in sentence 4
CHAIN55-["Frege 's" in sentence 7, "Frege" in sentence 8]
representative mention: "Frege 's" in sentence 7
CHAIN9-["both arguments and affixes" in sentence 2, "them" in sentence 2]
representative mention: "both arguments and affixes" in sentence 2
CHAIN43-["An affix" in sentence 6, "it" in sentence 6, "an affix" in sentence 7]
representative mention: "An affix" in sentence 6
CHAIN29-["the sign as a whole" in sentence 3, "this sign" in sentence 4, "it" in sentence 4]
representative mention: "the sign as a whole" in sentence 3
CHAIN61-["the affixes of names" in sentence 1, "the affixes of those names" in sentence 8]
representative mention: "the affixes of those names" in sentence 8
CHAIN62-["names" in sentence 1, "those names" in sentence 8]
representative mention: "those names" in sentence 8
