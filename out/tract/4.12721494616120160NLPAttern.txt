 Thus the variable name 'x' is the proper sign for the pseudo-concept object. Wherever the word 'object' ('thing', etc.) is correctly used, it is expressed in conceptual notation by a variable name. For example, in the proposition, 'There are 2 objects which. . .', it is expressed by ' (dx,y) ... '. Wherever it is used in a different way, that is as a proper concept- word, nonsensical pseudo-propositions are the result. So one cannot say, for example, 'There are objects', as one might say, 'There are books'. And it is just as impossible to say, 'There are 100 objects', or, 'There are !0 objects'. And it is nonsensical to speak of the total number of objects. The same applies to the words 'complex', 'fact', 'function', 'number', etc. They all signify formal concepts, and are represented in conceptual notation by variables, not by functions or classes (as Frege and Russell believed). '1 is a number', 'There is only one zero', and all similar expressions are nonsensical. (It is just as nonsensical to say, 'There is only one 1', as it would be to say, '2 + 2 at 3 o'clock equals 4'.)
------CorefChainz
CHAIN20-["the pseudo-concept object" in sentence 1, "the word ` object ' -LRB- ` thing ' , etc. -RRB-" in sentence 2, "it" in sentence 2, "it" in sentence 3, "it" in sentence 4]
representative mention: "the word ` object ' -LRB- ` thing ' , etc. -RRB-" in sentence 2
CHAIN57-["It" in sentence 12, "it" in sentence 12]
representative mention: "It" in sentence 12
---
Enhanced PLUS PLUS dependencies
---
---
---
---
---
---
---
---
---
---
---
---
---
---
Enhanced PLUS PLUS dependencies
---
---
qqroot(ROOT-0, sign-11)
cc(name-4, x-6)
det(name-4, the-2)
punct(name-4, `-5)
punct(name-4, '-7)
cop(sign-11, is-8)
det(sign-11, the-9)
punct(sign-11, .-16)
case(object-15, for-12)
det(object-15, the-13)
advmod(sign-11, Thus-1)
amod(name-4, variable-3)
nsubj(sign-11, name-4)
amod(sign-11, proper-10)
amod(object-15, pseudo-concept-14)
nmod:for(sign-11, object-15)
---
qqroot(ROOT-0, sign-11)
cc(name-4, x-6)
det(name-4, the-2)
punct(name-4, `-5)
punct(name-4, '-7)
cop(sign-11, is-8)
det(sign-11, the-9)
punct(sign-11, .-16)
case(object-15, for-12)
det(object-15, the-13)
advmod(sign-11, Thus-1)
amod(name-4, variable-3)
nsubj(sign-11, name-4)
amod(sign-11, proper-10)
amod(object-15, pseudo-concept-14)
nmod:for(sign-11, object-15)
root(ROOT-0, expressed-20)
compound(object-5, word-3)
det(object-5, the-2)
punct(object-5, `-4)
punct(object-5, '-6)
punct(thing-9, -LRB--7)
punct(thing-9, `-8)
punct(thing-9, '-10)
punct(thing-9, ,-11)
punct(thing-9, -RRB--13)
auxpass(used-16, is-14)
auxpass(expressed-20, is-19)
punct(expressed-20, .-28)
punct(expressed-20, ,-17)
case(notation-23, in-21)
case(name-27, by-24)
det(name-27, a-25)
nmod:tmod(expressed-20, Wherever-1)
nsubjpass(used-16, object-5)
appos(object-5, thing-9)
dep(thing-9, etc.-12)
advmod(used-16, correctly-15)
acl:relcl(Wherever-1, used-16)
nsubjpass(expressed-20, it-18)
amod(notation-23, conceptual-22)
nmod:in(expressed-20, notation-23)
amod(name-27, variable-26)
nmod:agent(expressed-20, name-27)
---
qqroot(ROOT-0, sign-11)
cc(name-4, x-6)
det(name-4, the-2)
punct(name-4, `-5)
punct(name-4, '-7)
cop(sign-11, is-8)
det(sign-11, the-9)
punct(sign-11, .-16)
case(object-15, for-12)
det(object-15, the-13)
advmod(sign-11, Thus-1)
amod(name-4, variable-3)
nsubj(sign-11, name-4)
amod(sign-11, proper-10)
amod(object-15, pseudo-concept-14)
nmod:for(sign-11, object-15)
root(ROOT-0, expressed-20)
compound(object-5, word-3)
det(object-5, the-2)
punct(object-5, `-4)
punct(object-5, '-6)
punct(thing-9, -LRB--7)
punct(thing-9, `-8)
punct(thing-9, '-10)
punct(thing-9, ,-11)
punct(thing-9, -RRB--13)
auxpass(used-16, is-14)
auxpass(expressed-20, is-19)
punct(expressed-20, .-28)
punct(expressed-20, ,-17)
case(notation-23, in-21)
case(name-27, by-24)
det(name-27, a-25)
nmod:tmod(expressed-20, Wherever-1)
nsubjpass(used-16, object-5)
appos(object-5, thing-9)
dep(thing-9, etc.-12)
advmod(used-16, correctly-15)
acl:relcl(Wherever-1, used-16)
nsubjpass(expressed-20, it-18)
amod(notation-23, conceptual-22)
nmod:in(expressed-20, notation-23)
amod(name-27, variable-26)
nmod:agent(expressed-20, name-27)
root(ROOT-0, are-10)
case(example-2, For-1)
case(proposition-6, in-4)
det(proposition-6, the-5)
punct(are-10, ,-7)
punct(are-10, `-8)
punct(are-10, ...-27)
punct(are-10, '-28)
punct(are-10, .-29)
punct(are-10, ,-3)
auxpass(expressed-19, is-18)
punct(expressed-19, ...-14)
punct(expressed-19, '-15)
punct(expressed-19, ,-16)
case(dx-23, by-20)
punct(dx-23, -LRB--22)
punct(dx-23, ,-24)
punct(dx-23, -RRB--26)
punct(dx-23, '-21)
nmod:for(are-10, example-2)
nmod:in(are-10, proposition-6)
expl(are-10, There-9)
nummod(objects-12, 2-11)
nsubj(are-10, objects-12)
dep(expressed-19, objects-12)
ref(objects-12, which-13)
nsubjpass(expressed-19, it-17)
acl:relcl(objects-12, expressed-19)
nmod:agent(expressed-19, dx-23)
appos(dx-23, y-25)
---
qqroot(ROOT-0, sign-11)
cc(name-4, x-6)
det(name-4, the-2)
punct(name-4, `-5)
punct(name-4, '-7)
cop(sign-11, is-8)
det(sign-11, the-9)
punct(sign-11, .-16)
case(object-15, for-12)
det(object-15, the-13)
advmod(sign-11, Thus-1)
amod(name-4, variable-3)
nsubj(sign-11, name-4)
amod(sign-11, proper-10)
amod(object-15, pseudo-concept-14)
nmod:for(sign-11, object-15)
root(ROOT-0, expressed-20)
compound(object-5, word-3)
det(object-5, the-2)
punct(object-5, `-4)
punct(object-5, '-6)
punct(thing-9, -LRB--7)
punct(thing-9, `-8)
punct(thing-9, '-10)
punct(thing-9, ,-11)
punct(thing-9, -RRB--13)
auxpass(used-16, is-14)
auxpass(expressed-20, is-19)
punct(expressed-20, .-28)
punct(expressed-20, ,-17)
case(notation-23, in-21)
case(name-27, by-24)
det(name-27, a-25)
nmod:tmod(expressed-20, Wherever-1)
nsubjpass(used-16, object-5)
appos(object-5, thing-9)
dep(thing-9, etc.-12)
advmod(used-16, correctly-15)
acl:relcl(Wherever-1, used-16)
nsubjpass(expressed-20, it-18)
amod(notation-23, conceptual-22)
nmod:in(expressed-20, notation-23)
amod(name-27, variable-26)
nmod:agent(expressed-20, name-27)
root(ROOT-0, are-10)
case(example-2, For-1)
case(proposition-6, in-4)
det(proposition-6, the-5)
punct(are-10, ,-7)
punct(are-10, `-8)
punct(are-10, ...-27)
punct(are-10, '-28)
punct(are-10, .-29)
punct(are-10, ,-3)
auxpass(expressed-19, is-18)
punct(expressed-19, ...-14)
punct(expressed-19, '-15)
punct(expressed-19, ,-16)
case(dx-23, by-20)
punct(dx-23, -LRB--22)
punct(dx-23, ,-24)
punct(dx-23, -RRB--26)
punct(dx-23, '-21)
nmod:for(are-10, example-2)
nmod:in(are-10, proposition-6)
expl(are-10, There-9)
nummod(objects-12, 2-11)
nsubj(are-10, objects-12)
dep(expressed-19, objects-12)
ref(objects-12, which-13)
nsubjpass(expressed-19, it-17)
acl:relcl(objects-12, expressed-19)
nmod:agent(expressed-19, dx-23)
appos(dx-23, y-25)
root(ROOT-0, Wherever-1)
punct(Wherever-1, ,-9)
punct(Wherever-1, .-24)
auxpass(used-4, is-3)
case(way-8, in-5)
det(way-8, a-6)
case(concept-15, as-12)
cop(concept-15, is-11)
det(concept-15, a-13)
punct(concept-15, --16)
compound(result-23, word-17)
cop(result-23, are-21)
det(result-23, the-22)
punct(result-23, ,-18)
nsubj(concept-15, Wherever-1)
nsubjpass(used-4, it-2)
acl:relcl(Wherever-1, used-4)
amod(way-8, different-7)
nmod:in(used-4, way-8)
ref(Wherever-1, that-10)
amod(concept-15, proper-14)
acl:relcl(Wherever-1, concept-15)
amod(pseudo-propositions-20, nonsensical-19)
nsubj(result-23, pseudo-propositions-20)
dep(concept-15, result-23)
---
qqroot(ROOT-0, sign-11)
cc(name-4, x-6)
det(name-4, the-2)
punct(name-4, `-5)
punct(name-4, '-7)
cop(sign-11, is-8)
det(sign-11, the-9)
punct(sign-11, .-16)
case(object-15, for-12)
det(object-15, the-13)
advmod(sign-11, Thus-1)
amod(name-4, variable-3)
nsubj(sign-11, name-4)
amod(sign-11, proper-10)
amod(object-15, pseudo-concept-14)
nmod:for(sign-11, object-15)
root(ROOT-0, expressed-20)
compound(object-5, word-3)
det(object-5, the-2)
punct(object-5, `-4)
punct(object-5, '-6)
punct(thing-9, -LRB--7)
punct(thing-9, `-8)
punct(thing-9, '-10)
punct(thing-9, ,-11)
punct(thing-9, -RRB--13)
auxpass(used-16, is-14)
auxpass(expressed-20, is-19)
punct(expressed-20, .-28)
punct(expressed-20, ,-17)
case(notation-23, in-21)
case(name-27, by-24)
det(name-27, a-25)
nmod:tmod(expressed-20, Wherever-1)
nsubjpass(used-16, object-5)
appos(object-5, thing-9)
dep(thing-9, etc.-12)
advmod(used-16, correctly-15)
acl:relcl(Wherever-1, used-16)
nsubjpass(expressed-20, it-18)
amod(notation-23, conceptual-22)
nmod:in(expressed-20, notation-23)
amod(name-27, variable-26)
nmod:agent(expressed-20, name-27)
root(ROOT-0, are-10)
case(example-2, For-1)
case(proposition-6, in-4)
det(proposition-6, the-5)
punct(are-10, ,-7)
punct(are-10, `-8)
punct(are-10, ...-27)
punct(are-10, '-28)
punct(are-10, .-29)
punct(are-10, ,-3)
auxpass(expressed-19, is-18)
punct(expressed-19, ...-14)
punct(expressed-19, '-15)
punct(expressed-19, ,-16)
case(dx-23, by-20)
punct(dx-23, -LRB--22)
punct(dx-23, ,-24)
punct(dx-23, -RRB--26)
punct(dx-23, '-21)
nmod:for(are-10, example-2)
nmod:in(are-10, proposition-6)
expl(are-10, There-9)
nummod(objects-12, 2-11)
nsubj(are-10, objects-12)
dep(expressed-19, objects-12)
ref(objects-12, which-13)
nsubjpass(expressed-19, it-17)
acl:relcl(objects-12, expressed-19)
nmod:agent(expressed-19, dx-23)
appos(dx-23, y-25)
root(ROOT-0, Wherever-1)
punct(Wherever-1, ,-9)
punct(Wherever-1, .-24)
auxpass(used-4, is-3)
case(way-8, in-5)
det(way-8, a-6)
case(concept-15, as-12)
cop(concept-15, is-11)
det(concept-15, a-13)
punct(concept-15, --16)
compound(result-23, word-17)
cop(result-23, are-21)
det(result-23, the-22)
punct(result-23, ,-18)
nsubj(concept-15, Wherever-1)
nsubjpass(used-4, it-2)
acl:relcl(Wherever-1, used-4)
amod(way-8, different-7)
nmod:in(used-4, way-8)
ref(Wherever-1, that-10)
amod(concept-15, proper-14)
acl:relcl(Wherever-1, concept-15)
amod(pseudo-propositions-20, nonsensical-19)
nsubj(result-23, pseudo-propositions-20)
dep(concept-15, result-23)
root(ROOT-0, say-5)
aux(say-5, can-3)
punct(say-5, ,-6)
punct(say-5, ,-9)
punct(say-5, `-10)
punct(say-5, .-26)
case(example-8, for-7)
case(objects-13, '-14)
aux(say-19, might-18)
mark(say-19, as-16)
punct(say-19, ,-15)
punct(say-19, ,-20)
punct(are-23, `-21)
case(books-24, '-25)
advmod(say-5, So-1)
nsubj(say-5, one-2)
neg(say-5, not-4)
nmod:for(say-5, example-8)
expl(are-12, There-11)
ccomp(say-5, are-12)
ccomp(are-23, objects-13)
nsubj(say-19, one-17)
parataxis(are-23, say-19)
expl(are-23, There-22)
ccomp(are-12, are-23)
advmod(are-23, books-24)
---
qqroot(ROOT-0, sign-11)
cc(name-4, x-6)
det(name-4, the-2)
punct(name-4, `-5)
punct(name-4, '-7)
cop(sign-11, is-8)
det(sign-11, the-9)
punct(sign-11, .-16)
case(object-15, for-12)
det(object-15, the-13)
advmod(sign-11, Thus-1)
amod(name-4, variable-3)
nsubj(sign-11, name-4)
amod(sign-11, proper-10)
amod(object-15, pseudo-concept-14)
nmod:for(sign-11, object-15)
root(ROOT-0, expressed-20)
compound(object-5, word-3)
det(object-5, the-2)
punct(object-5, `-4)
punct(object-5, '-6)
punct(thing-9, -LRB--7)
punct(thing-9, `-8)
punct(thing-9, '-10)
punct(thing-9, ,-11)
punct(thing-9, -RRB--13)
auxpass(used-16, is-14)
auxpass(expressed-20, is-19)
punct(expressed-20, .-28)
punct(expressed-20, ,-17)
case(notation-23, in-21)
case(name-27, by-24)
det(name-27, a-25)
nmod:tmod(expressed-20, Wherever-1)
nsubjpass(used-16, object-5)
appos(object-5, thing-9)
dep(thing-9, etc.-12)
advmod(used-16, correctly-15)
acl:relcl(Wherever-1, used-16)
nsubjpass(expressed-20, it-18)
amod(notation-23, conceptual-22)
nmod:in(expressed-20, notation-23)
amod(name-27, variable-26)
nmod:agent(expressed-20, name-27)
root(ROOT-0, are-10)
case(example-2, For-1)
case(proposition-6, in-4)
det(proposition-6, the-5)
punct(are-10, ,-7)
punct(are-10, `-8)
punct(are-10, ...-27)
punct(are-10, '-28)
punct(are-10, .-29)
punct(are-10, ,-3)
auxpass(expressed-19, is-18)
punct(expressed-19, ...-14)
punct(expressed-19, '-15)
punct(expressed-19, ,-16)
case(dx-23, by-20)
punct(dx-23, -LRB--22)
punct(dx-23, ,-24)
punct(dx-23, -RRB--26)
punct(dx-23, '-21)
nmod:for(are-10, example-2)
nmod:in(are-10, proposition-6)
expl(are-10, There-9)
nummod(objects-12, 2-11)
nsubj(are-10, objects-12)
dep(expressed-19, objects-12)
ref(objects-12, which-13)
nsubjpass(expressed-19, it-17)
acl:relcl(objects-12, expressed-19)
nmod:agent(expressed-19, dx-23)
appos(dx-23, y-25)
root(ROOT-0, Wherever-1)
punct(Wherever-1, ,-9)
punct(Wherever-1, .-24)
auxpass(used-4, is-3)
case(way-8, in-5)
det(way-8, a-6)
case(concept-15, as-12)
cop(concept-15, is-11)
det(concept-15, a-13)
punct(concept-15, --16)
compound(result-23, word-17)
cop(result-23, are-21)
det(result-23, the-22)
punct(result-23, ,-18)
nsubj(concept-15, Wherever-1)
nsubjpass(used-4, it-2)
acl:relcl(Wherever-1, used-4)
amod(way-8, different-7)
nmod:in(used-4, way-8)
ref(Wherever-1, that-10)
amod(concept-15, proper-14)
acl:relcl(Wherever-1, concept-15)
amod(pseudo-propositions-20, nonsensical-19)
nsubj(result-23, pseudo-propositions-20)
dep(concept-15, result-23)
root(ROOT-0, say-5)
aux(say-5, can-3)
punct(say-5, ,-6)
punct(say-5, ,-9)
punct(say-5, `-10)
punct(say-5, .-26)
case(example-8, for-7)
case(objects-13, '-14)
aux(say-19, might-18)
mark(say-19, as-16)
punct(say-19, ,-15)
punct(say-19, ,-20)
punct(are-23, `-21)
case(books-24, '-25)
advmod(say-5, So-1)
nsubj(say-5, one-2)
neg(say-5, not-4)
nmod:for(say-5, example-8)
expl(are-12, There-11)
ccomp(say-5, are-12)
ccomp(are-23, objects-13)
nsubj(say-19, one-17)
parataxis(are-23, say-19)
expl(are-23, There-22)
ccomp(are-12, are-23)
advmod(are-23, books-24)
root(ROOT-0, impossible-6)
cc(impossible-6, And-1)
cop(impossible-6, is-3)
punct(impossible-6, !-22)
mark(say-8, to-7)
punct(say-8, ,-9)
punct(say-8, `-10)
case(objects-14, '-15)
cc(objects-14, or-17)
punct(objects-14, ,-16)
punct(objects-14, ,-18)
punct(objects-14, `-19)
nsubj(impossible-6, it-2)
nsubj:xsubj(say-8, it-2)
advmod(impossible-6, just-4)
advmod(impossible-6, as-5)
xcomp(impossible-6, say-8)
expl(are-12, There-11)
ccomp(say-8, are-12)
nummod(objects-14, 100-13)
nsubj(are-12, objects-14)
expl(are-21, There-20)
dep(objects-14, are-21)
---
qqroot(ROOT-0, sign-11)
cc(name-4, x-6)
det(name-4, the-2)
punct(name-4, `-5)
punct(name-4, '-7)
cop(sign-11, is-8)
det(sign-11, the-9)
punct(sign-11, .-16)
case(object-15, for-12)
det(object-15, the-13)
advmod(sign-11, Thus-1)
amod(name-4, variable-3)
nsubj(sign-11, name-4)
amod(sign-11, proper-10)
amod(object-15, pseudo-concept-14)
nmod:for(sign-11, object-15)
root(ROOT-0, expressed-20)
compound(object-5, word-3)
det(object-5, the-2)
punct(object-5, `-4)
punct(object-5, '-6)
punct(thing-9, -LRB--7)
punct(thing-9, `-8)
punct(thing-9, '-10)
punct(thing-9, ,-11)
punct(thing-9, -RRB--13)
auxpass(used-16, is-14)
auxpass(expressed-20, is-19)
punct(expressed-20, .-28)
punct(expressed-20, ,-17)
case(notation-23, in-21)
case(name-27, by-24)
det(name-27, a-25)
nmod:tmod(expressed-20, Wherever-1)
nsubjpass(used-16, object-5)
appos(object-5, thing-9)
dep(thing-9, etc.-12)
advmod(used-16, correctly-15)
acl:relcl(Wherever-1, used-16)
nsubjpass(expressed-20, it-18)
amod(notation-23, conceptual-22)
nmod:in(expressed-20, notation-23)
amod(name-27, variable-26)
nmod:agent(expressed-20, name-27)
root(ROOT-0, are-10)
case(example-2, For-1)
case(proposition-6, in-4)
det(proposition-6, the-5)
punct(are-10, ,-7)
punct(are-10, `-8)
punct(are-10, ...-27)
punct(are-10, '-28)
punct(are-10, .-29)
punct(are-10, ,-3)
auxpass(expressed-19, is-18)
punct(expressed-19, ...-14)
punct(expressed-19, '-15)
punct(expressed-19, ,-16)
case(dx-23, by-20)
punct(dx-23, -LRB--22)
punct(dx-23, ,-24)
punct(dx-23, -RRB--26)
punct(dx-23, '-21)
nmod:for(are-10, example-2)
nmod:in(are-10, proposition-6)
expl(are-10, There-9)
nummod(objects-12, 2-11)
nsubj(are-10, objects-12)
dep(expressed-19, objects-12)
ref(objects-12, which-13)
nsubjpass(expressed-19, it-17)
acl:relcl(objects-12, expressed-19)
nmod:agent(expressed-19, dx-23)
appos(dx-23, y-25)
root(ROOT-0, Wherever-1)
punct(Wherever-1, ,-9)
punct(Wherever-1, .-24)
auxpass(used-4, is-3)
case(way-8, in-5)
det(way-8, a-6)
case(concept-15, as-12)
cop(concept-15, is-11)
det(concept-15, a-13)
punct(concept-15, --16)
compound(result-23, word-17)
cop(result-23, are-21)
det(result-23, the-22)
punct(result-23, ,-18)
nsubj(concept-15, Wherever-1)
nsubjpass(used-4, it-2)
acl:relcl(Wherever-1, used-4)
amod(way-8, different-7)
nmod:in(used-4, way-8)
ref(Wherever-1, that-10)
amod(concept-15, proper-14)
acl:relcl(Wherever-1, concept-15)
amod(pseudo-propositions-20, nonsensical-19)
nsubj(result-23, pseudo-propositions-20)
dep(concept-15, result-23)
root(ROOT-0, say-5)
aux(say-5, can-3)
punct(say-5, ,-6)
punct(say-5, ,-9)
punct(say-5, `-10)
punct(say-5, .-26)
case(example-8, for-7)
case(objects-13, '-14)
aux(say-19, might-18)
mark(say-19, as-16)
punct(say-19, ,-15)
punct(say-19, ,-20)
punct(are-23, `-21)
case(books-24, '-25)
advmod(say-5, So-1)
nsubj(say-5, one-2)
neg(say-5, not-4)
nmod:for(say-5, example-8)
expl(are-12, There-11)
ccomp(say-5, are-12)
ccomp(are-23, objects-13)
nsubj(say-19, one-17)
parataxis(are-23, say-19)
expl(are-23, There-22)
ccomp(are-12, are-23)
advmod(are-23, books-24)
root(ROOT-0, impossible-6)
cc(impossible-6, And-1)
cop(impossible-6, is-3)
punct(impossible-6, !-22)
mark(say-8, to-7)
punct(say-8, ,-9)
punct(say-8, `-10)
case(objects-14, '-15)
cc(objects-14, or-17)
punct(objects-14, ,-16)
punct(objects-14, ,-18)
punct(objects-14, `-19)
nsubj(impossible-6, it-2)
nsubj:xsubj(say-8, it-2)
advmod(impossible-6, just-4)
advmod(impossible-6, as-5)
xcomp(impossible-6, say-8)
expl(are-12, There-11)
ccomp(say-8, are-12)
nummod(objects-14, 100-13)
nsubj(are-12, objects-14)
expl(are-21, There-20)
dep(objects-14, are-21)
root(ROOT-0, objects-2)
case(objects-2, '-3)
punct(objects-2, .-4)
nummod(objects-2, 0-1)
---
qqroot(ROOT-0, sign-11)
cc(name-4, x-6)
det(name-4, the-2)
punct(name-4, `-5)
punct(name-4, '-7)
cop(sign-11, is-8)
det(sign-11, the-9)
punct(sign-11, .-16)
case(object-15, for-12)
det(object-15, the-13)
advmod(sign-11, Thus-1)
amod(name-4, variable-3)
nsubj(sign-11, name-4)
amod(sign-11, proper-10)
amod(object-15, pseudo-concept-14)
nmod:for(sign-11, object-15)
root(ROOT-0, expressed-20)
compound(object-5, word-3)
det(object-5, the-2)
punct(object-5, `-4)
punct(object-5, '-6)
punct(thing-9, -LRB--7)
punct(thing-9, `-8)
punct(thing-9, '-10)
punct(thing-9, ,-11)
punct(thing-9, -RRB--13)
auxpass(used-16, is-14)
auxpass(expressed-20, is-19)
punct(expressed-20, .-28)
punct(expressed-20, ,-17)
case(notation-23, in-21)
case(name-27, by-24)
det(name-27, a-25)
nmod:tmod(expressed-20, Wherever-1)
nsubjpass(used-16, object-5)
appos(object-5, thing-9)
dep(thing-9, etc.-12)
advmod(used-16, correctly-15)
acl:relcl(Wherever-1, used-16)
nsubjpass(expressed-20, it-18)
amod(notation-23, conceptual-22)
nmod:in(expressed-20, notation-23)
amod(name-27, variable-26)
nmod:agent(expressed-20, name-27)
root(ROOT-0, are-10)
case(example-2, For-1)
case(proposition-6, in-4)
det(proposition-6, the-5)
punct(are-10, ,-7)
punct(are-10, `-8)
punct(are-10, ...-27)
punct(are-10, '-28)
punct(are-10, .-29)
punct(are-10, ,-3)
auxpass(expressed-19, is-18)
punct(expressed-19, ...-14)
punct(expressed-19, '-15)
punct(expressed-19, ,-16)
case(dx-23, by-20)
punct(dx-23, -LRB--22)
punct(dx-23, ,-24)
punct(dx-23, -RRB--26)
punct(dx-23, '-21)
nmod:for(are-10, example-2)
nmod:in(are-10, proposition-6)
expl(are-10, There-9)
nummod(objects-12, 2-11)
nsubj(are-10, objects-12)
dep(expressed-19, objects-12)
ref(objects-12, which-13)
nsubjpass(expressed-19, it-17)
acl:relcl(objects-12, expressed-19)
nmod:agent(expressed-19, dx-23)
appos(dx-23, y-25)
root(ROOT-0, Wherever-1)
punct(Wherever-1, ,-9)
punct(Wherever-1, .-24)
auxpass(used-4, is-3)
case(way-8, in-5)
det(way-8, a-6)
case(concept-15, as-12)
cop(concept-15, is-11)
det(concept-15, a-13)
punct(concept-15, --16)
compound(result-23, word-17)
cop(result-23, are-21)
det(result-23, the-22)
punct(result-23, ,-18)
nsubj(concept-15, Wherever-1)
nsubjpass(used-4, it-2)
acl:relcl(Wherever-1, used-4)
amod(way-8, different-7)
nmod:in(used-4, way-8)
ref(Wherever-1, that-10)
amod(concept-15, proper-14)
acl:relcl(Wherever-1, concept-15)
amod(pseudo-propositions-20, nonsensical-19)
nsubj(result-23, pseudo-propositions-20)
dep(concept-15, result-23)
root(ROOT-0, say-5)
aux(say-5, can-3)
punct(say-5, ,-6)
punct(say-5, ,-9)
punct(say-5, `-10)
punct(say-5, .-26)
case(example-8, for-7)
case(objects-13, '-14)
aux(say-19, might-18)
mark(say-19, as-16)
punct(say-19, ,-15)
punct(say-19, ,-20)
punct(are-23, `-21)
case(books-24, '-25)
advmod(say-5, So-1)
nsubj(say-5, one-2)
neg(say-5, not-4)
nmod:for(say-5, example-8)
expl(are-12, There-11)
ccomp(say-5, are-12)
ccomp(are-23, objects-13)
nsubj(say-19, one-17)
parataxis(are-23, say-19)
expl(are-23, There-22)
ccomp(are-12, are-23)
advmod(are-23, books-24)
root(ROOT-0, impossible-6)
cc(impossible-6, And-1)
cop(impossible-6, is-3)
punct(impossible-6, !-22)
mark(say-8, to-7)
punct(say-8, ,-9)
punct(say-8, `-10)
case(objects-14, '-15)
cc(objects-14, or-17)
punct(objects-14, ,-16)
punct(objects-14, ,-18)
punct(objects-14, `-19)
nsubj(impossible-6, it-2)
nsubj:xsubj(say-8, it-2)
advmod(impossible-6, just-4)
advmod(impossible-6, as-5)
xcomp(impossible-6, say-8)
expl(are-12, There-11)
ccomp(say-8, are-12)
nummod(objects-14, 100-13)
nsubj(are-12, objects-14)
expl(are-21, There-20)
dep(objects-14, are-21)
root(ROOT-0, objects-2)
case(objects-2, '-3)
punct(objects-2, .-4)
nummod(objects-2, 0-1)
root(ROOT-0, nonsensical-4)
cc(nonsensical-4, And-1)
cop(nonsensical-4, is-3)
punct(nonsensical-4, .-13)
mark(speak-6, to-5)
case(number-10, of-7)
det(number-10, the-8)
case(objects-12, of-11)
nsubj(nonsensical-4, it-2)
nsubj:xsubj(speak-6, it-2)
xcomp(nonsensical-4, speak-6)
amod(number-10, total-9)
nmod:of(speak-6, number-10)
nmod:of(number-10, objects-12)
---
qqroot(ROOT-0, sign-11)
cc(name-4, x-6)
det(name-4, the-2)
punct(name-4, `-5)
punct(name-4, '-7)
cop(sign-11, is-8)
det(sign-11, the-9)
punct(sign-11, .-16)
case(object-15, for-12)
det(object-15, the-13)
advmod(sign-11, Thus-1)
amod(name-4, variable-3)
nsubj(sign-11, name-4)
amod(sign-11, proper-10)
amod(object-15, pseudo-concept-14)
nmod:for(sign-11, object-15)
root(ROOT-0, expressed-20)
compound(object-5, word-3)
det(object-5, the-2)
punct(object-5, `-4)
punct(object-5, '-6)
punct(thing-9, -LRB--7)
punct(thing-9, `-8)
punct(thing-9, '-10)
punct(thing-9, ,-11)
punct(thing-9, -RRB--13)
auxpass(used-16, is-14)
auxpass(expressed-20, is-19)
punct(expressed-20, .-28)
punct(expressed-20, ,-17)
case(notation-23, in-21)
case(name-27, by-24)
det(name-27, a-25)
nmod:tmod(expressed-20, Wherever-1)
nsubjpass(used-16, object-5)
appos(object-5, thing-9)
dep(thing-9, etc.-12)
advmod(used-16, correctly-15)
acl:relcl(Wherever-1, used-16)
nsubjpass(expressed-20, it-18)
amod(notation-23, conceptual-22)
nmod:in(expressed-20, notation-23)
amod(name-27, variable-26)
nmod:agent(expressed-20, name-27)
root(ROOT-0, are-10)
case(example-2, For-1)
case(proposition-6, in-4)
det(proposition-6, the-5)
punct(are-10, ,-7)
punct(are-10, `-8)
punct(are-10, ...-27)
punct(are-10, '-28)
punct(are-10, .-29)
punct(are-10, ,-3)
auxpass(expressed-19, is-18)
punct(expressed-19, ...-14)
punct(expressed-19, '-15)
punct(expressed-19, ,-16)
case(dx-23, by-20)
punct(dx-23, -LRB--22)
punct(dx-23, ,-24)
punct(dx-23, -RRB--26)
punct(dx-23, '-21)
nmod:for(are-10, example-2)
nmod:in(are-10, proposition-6)
expl(are-10, There-9)
nummod(objects-12, 2-11)
nsubj(are-10, objects-12)
dep(expressed-19, objects-12)
ref(objects-12, which-13)
nsubjpass(expressed-19, it-17)
acl:relcl(objects-12, expressed-19)
nmod:agent(expressed-19, dx-23)
appos(dx-23, y-25)
root(ROOT-0, Wherever-1)
punct(Wherever-1, ,-9)
punct(Wherever-1, .-24)
auxpass(used-4, is-3)
case(way-8, in-5)
det(way-8, a-6)
case(concept-15, as-12)
cop(concept-15, is-11)
det(concept-15, a-13)
punct(concept-15, --16)
compound(result-23, word-17)
cop(result-23, are-21)
det(result-23, the-22)
punct(result-23, ,-18)
nsubj(concept-15, Wherever-1)
nsubjpass(used-4, it-2)
acl:relcl(Wherever-1, used-4)
amod(way-8, different-7)
nmod:in(used-4, way-8)
ref(Wherever-1, that-10)
amod(concept-15, proper-14)
acl:relcl(Wherever-1, concept-15)
amod(pseudo-propositions-20, nonsensical-19)
nsubj(result-23, pseudo-propositions-20)
dep(concept-15, result-23)
root(ROOT-0, say-5)
aux(say-5, can-3)
punct(say-5, ,-6)
punct(say-5, ,-9)
punct(say-5, `-10)
punct(say-5, .-26)
case(example-8, for-7)
case(objects-13, '-14)
aux(say-19, might-18)
mark(say-19, as-16)
punct(say-19, ,-15)
punct(say-19, ,-20)
punct(are-23, `-21)
case(books-24, '-25)
advmod(say-5, So-1)
nsubj(say-5, one-2)
neg(say-5, not-4)
nmod:for(say-5, example-8)
expl(are-12, There-11)
ccomp(say-5, are-12)
ccomp(are-23, objects-13)
nsubj(say-19, one-17)
parataxis(are-23, say-19)
expl(are-23, There-22)
ccomp(are-12, are-23)
advmod(are-23, books-24)
root(ROOT-0, impossible-6)
cc(impossible-6, And-1)
cop(impossible-6, is-3)
punct(impossible-6, !-22)
mark(say-8, to-7)
punct(say-8, ,-9)
punct(say-8, `-10)
case(objects-14, '-15)
cc(objects-14, or-17)
punct(objects-14, ,-16)
punct(objects-14, ,-18)
punct(objects-14, `-19)
nsubj(impossible-6, it-2)
nsubj:xsubj(say-8, it-2)
advmod(impossible-6, just-4)
advmod(impossible-6, as-5)
xcomp(impossible-6, say-8)
expl(are-12, There-11)
ccomp(say-8, are-12)
nummod(objects-14, 100-13)
nsubj(are-12, objects-14)
expl(are-21, There-20)
dep(objects-14, are-21)
root(ROOT-0, objects-2)
case(objects-2, '-3)
punct(objects-2, .-4)
nummod(objects-2, 0-1)
root(ROOT-0, nonsensical-4)
cc(nonsensical-4, And-1)
cop(nonsensical-4, is-3)
punct(nonsensical-4, .-13)
mark(speak-6, to-5)
case(number-10, of-7)
det(number-10, the-8)
case(objects-12, of-11)
nsubj(nonsensical-4, it-2)
nsubj:xsubj(speak-6, it-2)
xcomp(nonsensical-4, speak-6)
amod(number-10, total-9)
nmod:of(speak-6, number-10)
nmod:of(number-10, objects-12)
root(ROOT-0, applies-3)
det(same-2, The-1)
punct(applies-3, .-24)
punct(applies-3, ,-10)
punct(applies-3, `-11)
case(words-6, to-4)
det(words-6, the-5)
punct(words-6, '-9)
punct(words-6, `-7)
punct(fact-12, '-13)
punct(fact-12, ,-14)
punct(fact-12, ,-18)
punct(fact-12, ,-22)
punct(function-16, `-15)
punct(function-16, '-17)
punct(number-20, `-19)
punct(number-20, '-21)
nsubj(applies-3, same-2)
nmod:to(applies-3, words-6)
amod(words-6, complex-8)
dep(applies-3, fact-12)
appos(fact-12, function-16)
appos(fact-12, number-20)
dep(fact-12, etc.-23)
---
qqroot(ROOT-0, sign-11)
cc(name-4, x-6)
det(name-4, the-2)
punct(name-4, `-5)
punct(name-4, '-7)
cop(sign-11, is-8)
det(sign-11, the-9)
punct(sign-11, .-16)
case(object-15, for-12)
det(object-15, the-13)
advmod(sign-11, Thus-1)
amod(name-4, variable-3)
nsubj(sign-11, name-4)
amod(sign-11, proper-10)
amod(object-15, pseudo-concept-14)
nmod:for(sign-11, object-15)
root(ROOT-0, expressed-20)
compound(object-5, word-3)
det(object-5, the-2)
punct(object-5, `-4)
punct(object-5, '-6)
punct(thing-9, -LRB--7)
punct(thing-9, `-8)
punct(thing-9, '-10)
punct(thing-9, ,-11)
punct(thing-9, -RRB--13)
auxpass(used-16, is-14)
auxpass(expressed-20, is-19)
punct(expressed-20, .-28)
punct(expressed-20, ,-17)
case(notation-23, in-21)
case(name-27, by-24)
det(name-27, a-25)
nmod:tmod(expressed-20, Wherever-1)
nsubjpass(used-16, object-5)
appos(object-5, thing-9)
dep(thing-9, etc.-12)
advmod(used-16, correctly-15)
acl:relcl(Wherever-1, used-16)
nsubjpass(expressed-20, it-18)
amod(notation-23, conceptual-22)
nmod:in(expressed-20, notation-23)
amod(name-27, variable-26)
nmod:agent(expressed-20, name-27)
root(ROOT-0, are-10)
case(example-2, For-1)
case(proposition-6, in-4)
det(proposition-6, the-5)
punct(are-10, ,-7)
punct(are-10, `-8)
punct(are-10, ...-27)
punct(are-10, '-28)
punct(are-10, .-29)
punct(are-10, ,-3)
auxpass(expressed-19, is-18)
punct(expressed-19, ...-14)
punct(expressed-19, '-15)
punct(expressed-19, ,-16)
case(dx-23, by-20)
punct(dx-23, -LRB--22)
punct(dx-23, ,-24)
punct(dx-23, -RRB--26)
punct(dx-23, '-21)
nmod:for(are-10, example-2)
nmod:in(are-10, proposition-6)
expl(are-10, There-9)
nummod(objects-12, 2-11)
nsubj(are-10, objects-12)
dep(expressed-19, objects-12)
ref(objects-12, which-13)
nsubjpass(expressed-19, it-17)
acl:relcl(objects-12, expressed-19)
nmod:agent(expressed-19, dx-23)
appos(dx-23, y-25)
root(ROOT-0, Wherever-1)
punct(Wherever-1, ,-9)
punct(Wherever-1, .-24)
auxpass(used-4, is-3)
case(way-8, in-5)
det(way-8, a-6)
case(concept-15, as-12)
cop(concept-15, is-11)
det(concept-15, a-13)
punct(concept-15, --16)
compound(result-23, word-17)
cop(result-23, are-21)
det(result-23, the-22)
punct(result-23, ,-18)
nsubj(concept-15, Wherever-1)
nsubjpass(used-4, it-2)
acl:relcl(Wherever-1, used-4)
amod(way-8, different-7)
nmod:in(used-4, way-8)
ref(Wherever-1, that-10)
amod(concept-15, proper-14)
acl:relcl(Wherever-1, concept-15)
amod(pseudo-propositions-20, nonsensical-19)
nsubj(result-23, pseudo-propositions-20)
dep(concept-15, result-23)
root(ROOT-0, say-5)
aux(say-5, can-3)
punct(say-5, ,-6)
punct(say-5, ,-9)
punct(say-5, `-10)
punct(say-5, .-26)
case(example-8, for-7)
case(objects-13, '-14)
aux(say-19, might-18)
mark(say-19, as-16)
punct(say-19, ,-15)
punct(say-19, ,-20)
punct(are-23, `-21)
case(books-24, '-25)
advmod(say-5, So-1)
nsubj(say-5, one-2)
neg(say-5, not-4)
nmod:for(say-5, example-8)
expl(are-12, There-11)
ccomp(say-5, are-12)
ccomp(are-23, objects-13)
nsubj(say-19, one-17)
parataxis(are-23, say-19)
expl(are-23, There-22)
ccomp(are-12, are-23)
advmod(are-23, books-24)
root(ROOT-0, impossible-6)
cc(impossible-6, And-1)
cop(impossible-6, is-3)
punct(impossible-6, !-22)
mark(say-8, to-7)
punct(say-8, ,-9)
punct(say-8, `-10)
case(objects-14, '-15)
cc(objects-14, or-17)
punct(objects-14, ,-16)
punct(objects-14, ,-18)
punct(objects-14, `-19)
nsubj(impossible-6, it-2)
nsubj:xsubj(say-8, it-2)
advmod(impossible-6, just-4)
advmod(impossible-6, as-5)
xcomp(impossible-6, say-8)
expl(are-12, There-11)
ccomp(say-8, are-12)
nummod(objects-14, 100-13)
nsubj(are-12, objects-14)
expl(are-21, There-20)
dep(objects-14, are-21)
root(ROOT-0, objects-2)
case(objects-2, '-3)
punct(objects-2, .-4)
nummod(objects-2, 0-1)
root(ROOT-0, nonsensical-4)
cc(nonsensical-4, And-1)
cop(nonsensical-4, is-3)
punct(nonsensical-4, .-13)
mark(speak-6, to-5)
case(number-10, of-7)
det(number-10, the-8)
case(objects-12, of-11)
nsubj(nonsensical-4, it-2)
nsubj:xsubj(speak-6, it-2)
xcomp(nonsensical-4, speak-6)
amod(number-10, total-9)
nmod:of(speak-6, number-10)
nmod:of(number-10, objects-12)
root(ROOT-0, applies-3)
det(same-2, The-1)
punct(applies-3, .-24)
punct(applies-3, ,-10)
punct(applies-3, `-11)
case(words-6, to-4)
det(words-6, the-5)
punct(words-6, '-9)
punct(words-6, `-7)
punct(fact-12, '-13)
punct(fact-12, ,-14)
punct(fact-12, ,-18)
punct(fact-12, ,-22)
punct(function-16, `-15)
punct(function-16, '-17)
punct(number-20, `-19)
punct(number-20, '-21)
nsubj(applies-3, same-2)
nmod:to(applies-3, words-6)
amod(words-6, complex-8)
dep(applies-3, fact-12)
appos(fact-12, function-16)
appos(fact-12, number-20)
dep(fact-12, etc.-23)
root(ROOT-0, signify-3)
det(They-1, all-2)
cc(signify-3, and-7)
punct(signify-3, .-28)
punct(signify-3, '-29)
punct(signify-3, ,-6)
auxpass(represented-9, are-8)
case(notation-12, in-10)
case(variables-14, by-13)
punct(variables-14, ,-15)
case(functions-18, by-17)
cc(functions-18, or-19)
case(Frege-23, as-22)
cc(Frege-23, and-24)
punct(Frege-23, -RRB--27)
punct(Frege-23, -LRB--21)
nsubj(signify-3, They-1)
nsubjpass(represented-9, They-1)
amod(concepts-5, formal-4)
dobj(signify-3, concepts-5)
conj:and(signify-3, represented-9)
amod(notation-12, conceptual-11)
nmod:in(represented-9, notation-12)
nmod:agent(represented-9, variables-14)
neg(functions-18, not-16)
nmod:by(variables-14, functions-18)
nmod:by(variables-14, classes-20)
conj:or(functions-18, classes-20)
dep(variables-14, Frege-23)
dep(variables-14, Russell-25)
conj:and(Frege-23, Russell-25)
dep(Frege-23, believed-26)
---
qqroot(ROOT-0, sign-11)
cc(name-4, x-6)
det(name-4, the-2)
punct(name-4, `-5)
punct(name-4, '-7)
cop(sign-11, is-8)
det(sign-11, the-9)
punct(sign-11, .-16)
case(object-15, for-12)
det(object-15, the-13)
advmod(sign-11, Thus-1)
amod(name-4, variable-3)
nsubj(sign-11, name-4)
amod(sign-11, proper-10)
amod(object-15, pseudo-concept-14)
nmod:for(sign-11, object-15)
root(ROOT-0, expressed-20)
compound(object-5, word-3)
det(object-5, the-2)
punct(object-5, `-4)
punct(object-5, '-6)
punct(thing-9, -LRB--7)
punct(thing-9, `-8)
punct(thing-9, '-10)
punct(thing-9, ,-11)
punct(thing-9, -RRB--13)
auxpass(used-16, is-14)
auxpass(expressed-20, is-19)
punct(expressed-20, .-28)
punct(expressed-20, ,-17)
case(notation-23, in-21)
case(name-27, by-24)
det(name-27, a-25)
nmod:tmod(expressed-20, Wherever-1)
nsubjpass(used-16, object-5)
appos(object-5, thing-9)
dep(thing-9, etc.-12)
advmod(used-16, correctly-15)
acl:relcl(Wherever-1, used-16)
nsubjpass(expressed-20, it-18)
amod(notation-23, conceptual-22)
nmod:in(expressed-20, notation-23)
amod(name-27, variable-26)
nmod:agent(expressed-20, name-27)
root(ROOT-0, are-10)
case(example-2, For-1)
case(proposition-6, in-4)
det(proposition-6, the-5)
punct(are-10, ,-7)
punct(are-10, `-8)
punct(are-10, ...-27)
punct(are-10, '-28)
punct(are-10, .-29)
punct(are-10, ,-3)
auxpass(expressed-19, is-18)
punct(expressed-19, ...-14)
punct(expressed-19, '-15)
punct(expressed-19, ,-16)
case(dx-23, by-20)
punct(dx-23, -LRB--22)
punct(dx-23, ,-24)
punct(dx-23, -RRB--26)
punct(dx-23, '-21)
nmod:for(are-10, example-2)
nmod:in(are-10, proposition-6)
expl(are-10, There-9)
nummod(objects-12, 2-11)
nsubj(are-10, objects-12)
dep(expressed-19, objects-12)
ref(objects-12, which-13)
nsubjpass(expressed-19, it-17)
acl:relcl(objects-12, expressed-19)
nmod:agent(expressed-19, dx-23)
appos(dx-23, y-25)
root(ROOT-0, Wherever-1)
punct(Wherever-1, ,-9)
punct(Wherever-1, .-24)
auxpass(used-4, is-3)
case(way-8, in-5)
det(way-8, a-6)
case(concept-15, as-12)
cop(concept-15, is-11)
det(concept-15, a-13)
punct(concept-15, --16)
compound(result-23, word-17)
cop(result-23, are-21)
det(result-23, the-22)
punct(result-23, ,-18)
nsubj(concept-15, Wherever-1)
nsubjpass(used-4, it-2)
acl:relcl(Wherever-1, used-4)
amod(way-8, different-7)
nmod:in(used-4, way-8)
ref(Wherever-1, that-10)
amod(concept-15, proper-14)
acl:relcl(Wherever-1, concept-15)
amod(pseudo-propositions-20, nonsensical-19)
nsubj(result-23, pseudo-propositions-20)
dep(concept-15, result-23)
root(ROOT-0, say-5)
aux(say-5, can-3)
punct(say-5, ,-6)
punct(say-5, ,-9)
punct(say-5, `-10)
punct(say-5, .-26)
case(example-8, for-7)
case(objects-13, '-14)
aux(say-19, might-18)
mark(say-19, as-16)
punct(say-19, ,-15)
punct(say-19, ,-20)
punct(are-23, `-21)
case(books-24, '-25)
advmod(say-5, So-1)
nsubj(say-5, one-2)
neg(say-5, not-4)
nmod:for(say-5, example-8)
expl(are-12, There-11)
ccomp(say-5, are-12)
ccomp(are-23, objects-13)
nsubj(say-19, one-17)
parataxis(are-23, say-19)
expl(are-23, There-22)
ccomp(are-12, are-23)
advmod(are-23, books-24)
root(ROOT-0, impossible-6)
cc(impossible-6, And-1)
cop(impossible-6, is-3)
punct(impossible-6, !-22)
mark(say-8, to-7)
punct(say-8, ,-9)
punct(say-8, `-10)
case(objects-14, '-15)
cc(objects-14, or-17)
punct(objects-14, ,-16)
punct(objects-14, ,-18)
punct(objects-14, `-19)
nsubj(impossible-6, it-2)
nsubj:xsubj(say-8, it-2)
advmod(impossible-6, just-4)
advmod(impossible-6, as-5)
xcomp(impossible-6, say-8)
expl(are-12, There-11)
ccomp(say-8, are-12)
nummod(objects-14, 100-13)
nsubj(are-12, objects-14)
expl(are-21, There-20)
dep(objects-14, are-21)
root(ROOT-0, objects-2)
case(objects-2, '-3)
punct(objects-2, .-4)
nummod(objects-2, 0-1)
root(ROOT-0, nonsensical-4)
cc(nonsensical-4, And-1)
cop(nonsensical-4, is-3)
punct(nonsensical-4, .-13)
mark(speak-6, to-5)
case(number-10, of-7)
det(number-10, the-8)
case(objects-12, of-11)
nsubj(nonsensical-4, it-2)
nsubj:xsubj(speak-6, it-2)
xcomp(nonsensical-4, speak-6)
amod(number-10, total-9)
nmod:of(speak-6, number-10)
nmod:of(number-10, objects-12)
root(ROOT-0, applies-3)
det(same-2, The-1)
punct(applies-3, .-24)
punct(applies-3, ,-10)
punct(applies-3, `-11)
case(words-6, to-4)
det(words-6, the-5)
punct(words-6, '-9)
punct(words-6, `-7)
punct(fact-12, '-13)
punct(fact-12, ,-14)
punct(fact-12, ,-18)
punct(fact-12, ,-22)
punct(function-16, `-15)
punct(function-16, '-17)
punct(number-20, `-19)
punct(number-20, '-21)
nsubj(applies-3, same-2)
nmod:to(applies-3, words-6)
amod(words-6, complex-8)
dep(applies-3, fact-12)
appos(fact-12, function-16)
appos(fact-12, number-20)
dep(fact-12, etc.-23)
root(ROOT-0, signify-3)
det(They-1, all-2)
cc(signify-3, and-7)
punct(signify-3, .-28)
punct(signify-3, '-29)
punct(signify-3, ,-6)
auxpass(represented-9, are-8)
case(notation-12, in-10)
case(variables-14, by-13)
punct(variables-14, ,-15)
case(functions-18, by-17)
cc(functions-18, or-19)
case(Frege-23, as-22)
cc(Frege-23, and-24)
punct(Frege-23, -RRB--27)
punct(Frege-23, -LRB--21)
nsubj(signify-3, They-1)
nsubjpass(represented-9, They-1)
amod(concepts-5, formal-4)
dobj(signify-3, concepts-5)
conj:and(signify-3, represented-9)
amod(notation-12, conceptual-11)
nmod:in(represented-9, notation-12)
nmod:agent(represented-9, variables-14)
neg(functions-18, not-16)
nmod:by(variables-14, functions-18)
nmod:by(variables-14, classes-20)
conj:or(functions-18, classes-20)
dep(variables-14, Frege-23)
dep(variables-14, Russell-25)
conj:and(Frege-23, Russell-25)
dep(Frege-23, believed-26)
root(ROOT-0, number-4)
cop(number-4, is-2)
det(number-4, a-3)
punct(number-4, '-5)
punct(number-4, .-21)
punct(number-4, ,-6)
punct(number-4, `-7)
cc(zero-12, and-15)
punct(zero-12, ,-14)
punct(zero-12, '-13)
det(expressions-18, all-16)
cop(nonsensical-20, are-19)
nsubj(number-4, 1-1)
expl(is-9, There-8)
dep(number-4, is-9)
advmod(one-11, only-10)
nummod(zero-12, one-11)
nsubj(nonsensical-20, zero-12)
amod(expressions-18, similar-17)
conj:and(zero-12, expressions-18)
nsubj(nonsensical-20, expressions-18)
ccomp(is-9, nonsensical-20)
---
qqroot(ROOT-0, sign-11)
cc(name-4, x-6)
det(name-4, the-2)
punct(name-4, `-5)
punct(name-4, '-7)
cop(sign-11, is-8)
det(sign-11, the-9)
punct(sign-11, .-16)
case(object-15, for-12)
det(object-15, the-13)
advmod(sign-11, Thus-1)
amod(name-4, variable-3)
nsubj(sign-11, name-4)
amod(sign-11, proper-10)
amod(object-15, pseudo-concept-14)
nmod:for(sign-11, object-15)
root(ROOT-0, expressed-20)
compound(object-5, word-3)
det(object-5, the-2)
punct(object-5, `-4)
punct(object-5, '-6)
punct(thing-9, -LRB--7)
punct(thing-9, `-8)
punct(thing-9, '-10)
punct(thing-9, ,-11)
punct(thing-9, -RRB--13)
auxpass(used-16, is-14)
auxpass(expressed-20, is-19)
punct(expressed-20, .-28)
punct(expressed-20, ,-17)
case(notation-23, in-21)
case(name-27, by-24)
det(name-27, a-25)
nmod:tmod(expressed-20, Wherever-1)
nsubjpass(used-16, object-5)
appos(object-5, thing-9)
dep(thing-9, etc.-12)
advmod(used-16, correctly-15)
acl:relcl(Wherever-1, used-16)
nsubjpass(expressed-20, it-18)
amod(notation-23, conceptual-22)
nmod:in(expressed-20, notation-23)
amod(name-27, variable-26)
nmod:agent(expressed-20, name-27)
root(ROOT-0, are-10)
case(example-2, For-1)
case(proposition-6, in-4)
det(proposition-6, the-5)
punct(are-10, ,-7)
punct(are-10, `-8)
punct(are-10, ...-27)
punct(are-10, '-28)
punct(are-10, .-29)
punct(are-10, ,-3)
auxpass(expressed-19, is-18)
punct(expressed-19, ...-14)
punct(expressed-19, '-15)
punct(expressed-19, ,-16)
case(dx-23, by-20)
punct(dx-23, -LRB--22)
punct(dx-23, ,-24)
punct(dx-23, -RRB--26)
punct(dx-23, '-21)
nmod:for(are-10, example-2)
nmod:in(are-10, proposition-6)
expl(are-10, There-9)
nummod(objects-12, 2-11)
nsubj(are-10, objects-12)
dep(expressed-19, objects-12)
ref(objects-12, which-13)
nsubjpass(expressed-19, it-17)
acl:relcl(objects-12, expressed-19)
nmod:agent(expressed-19, dx-23)
appos(dx-23, y-25)
root(ROOT-0, Wherever-1)
punct(Wherever-1, ,-9)
punct(Wherever-1, .-24)
auxpass(used-4, is-3)
case(way-8, in-5)
det(way-8, a-6)
case(concept-15, as-12)
cop(concept-15, is-11)
det(concept-15, a-13)
punct(concept-15, --16)
compound(result-23, word-17)
cop(result-23, are-21)
det(result-23, the-22)
punct(result-23, ,-18)
nsubj(concept-15, Wherever-1)
nsubjpass(used-4, it-2)
acl:relcl(Wherever-1, used-4)
amod(way-8, different-7)
nmod:in(used-4, way-8)
ref(Wherever-1, that-10)
amod(concept-15, proper-14)
acl:relcl(Wherever-1, concept-15)
amod(pseudo-propositions-20, nonsensical-19)
nsubj(result-23, pseudo-propositions-20)
dep(concept-15, result-23)
root(ROOT-0, say-5)
aux(say-5, can-3)
punct(say-5, ,-6)
punct(say-5, ,-9)
punct(say-5, `-10)
punct(say-5, .-26)
case(example-8, for-7)
case(objects-13, '-14)
aux(say-19, might-18)
mark(say-19, as-16)
punct(say-19, ,-15)
punct(say-19, ,-20)
punct(are-23, `-21)
case(books-24, '-25)
advmod(say-5, So-1)
nsubj(say-5, one-2)
neg(say-5, not-4)
nmod:for(say-5, example-8)
expl(are-12, There-11)
ccomp(say-5, are-12)
ccomp(are-23, objects-13)
nsubj(say-19, one-17)
parataxis(are-23, say-19)
expl(are-23, There-22)
ccomp(are-12, are-23)
advmod(are-23, books-24)
root(ROOT-0, impossible-6)
cc(impossible-6, And-1)
cop(impossible-6, is-3)
punct(impossible-6, !-22)
mark(say-8, to-7)
punct(say-8, ,-9)
punct(say-8, `-10)
case(objects-14, '-15)
cc(objects-14, or-17)
punct(objects-14, ,-16)
punct(objects-14, ,-18)
punct(objects-14, `-19)
nsubj(impossible-6, it-2)
nsubj:xsubj(say-8, it-2)
advmod(impossible-6, just-4)
advmod(impossible-6, as-5)
xcomp(impossible-6, say-8)
expl(are-12, There-11)
ccomp(say-8, are-12)
nummod(objects-14, 100-13)
nsubj(are-12, objects-14)
expl(are-21, There-20)
dep(objects-14, are-21)
root(ROOT-0, objects-2)
case(objects-2, '-3)
punct(objects-2, .-4)
nummod(objects-2, 0-1)
root(ROOT-0, nonsensical-4)
cc(nonsensical-4, And-1)
cop(nonsensical-4, is-3)
punct(nonsensical-4, .-13)
mark(speak-6, to-5)
case(number-10, of-7)
det(number-10, the-8)
case(objects-12, of-11)
nsubj(nonsensical-4, it-2)
nsubj:xsubj(speak-6, it-2)
xcomp(nonsensical-4, speak-6)
amod(number-10, total-9)
nmod:of(speak-6, number-10)
nmod:of(number-10, objects-12)
root(ROOT-0, applies-3)
det(same-2, The-1)
punct(applies-3, .-24)
punct(applies-3, ,-10)
punct(applies-3, `-11)
case(words-6, to-4)
det(words-6, the-5)
punct(words-6, '-9)
punct(words-6, `-7)
punct(fact-12, '-13)
punct(fact-12, ,-14)
punct(fact-12, ,-18)
punct(fact-12, ,-22)
punct(function-16, `-15)
punct(function-16, '-17)
punct(number-20, `-19)
punct(number-20, '-21)
nsubj(applies-3, same-2)
nmod:to(applies-3, words-6)
amod(words-6, complex-8)
dep(applies-3, fact-12)
appos(fact-12, function-16)
appos(fact-12, number-20)
dep(fact-12, etc.-23)
root(ROOT-0, signify-3)
det(They-1, all-2)
cc(signify-3, and-7)
punct(signify-3, .-28)
punct(signify-3, '-29)
punct(signify-3, ,-6)
auxpass(represented-9, are-8)
case(notation-12, in-10)
case(variables-14, by-13)
punct(variables-14, ,-15)
case(functions-18, by-17)
cc(functions-18, or-19)
case(Frege-23, as-22)
cc(Frege-23, and-24)
punct(Frege-23, -RRB--27)
punct(Frege-23, -LRB--21)
nsubj(signify-3, They-1)
nsubjpass(represented-9, They-1)
amod(concepts-5, formal-4)
dobj(signify-3, concepts-5)
conj:and(signify-3, represented-9)
amod(notation-12, conceptual-11)
nmod:in(represented-9, notation-12)
nmod:agent(represented-9, variables-14)
neg(functions-18, not-16)
nmod:by(variables-14, functions-18)
nmod:by(variables-14, classes-20)
conj:or(functions-18, classes-20)
dep(variables-14, Frege-23)
dep(variables-14, Russell-25)
conj:and(Frege-23, Russell-25)
dep(Frege-23, believed-26)
root(ROOT-0, number-4)
cop(number-4, is-2)
det(number-4, a-3)
punct(number-4, '-5)
punct(number-4, .-21)
punct(number-4, ,-6)
punct(number-4, `-7)
cc(zero-12, and-15)
punct(zero-12, ,-14)
punct(zero-12, '-13)
det(expressions-18, all-16)
cop(nonsensical-20, are-19)
nsubj(number-4, 1-1)
expl(is-9, There-8)
dep(number-4, is-9)
advmod(one-11, only-10)
nummod(zero-12, one-11)
nsubj(nonsensical-20, zero-12)
amod(expressions-18, similar-17)
conj:and(zero-12, expressions-18)
nsubj(nonsensical-20, expressions-18)
ccomp(is-9, nonsensical-20)
root(ROOT-0, nonsensical-6)
cop(nonsensical-6, is-3)
punct(nonsensical-6, -LRB--1)
punct(nonsensical-6, .-35)
punct(nonsensical-6, -RRB--36)
mark(say-8, to-7)
punct(say-8, ,-9)
punct(say-8, `-10)
punct(1-15, '-16)
aux(be-21, would-20)
mark(be-21, as-18)
mark(say-23, to-22)
cc(2-26, +-27)
case(3-30, at-29)
punct(equals-32, ,-17)
punct(equals-32, ,-24)
punct(equals-32, '-25)
punct(4-33, '-34)
nsubj(nonsensical-6, It-2)
nsubj:xsubj(say-8, It-2)
advmod(nonsensical-6, just-4)
advmod(nonsensical-6, as-5)
xcomp(nonsensical-6, say-8)
expl(is-12, There-11)
ccomp(say-8, is-12)
advmod(one-14, only-13)
nummod(1-15, one-14)
ccomp(equals-32, 1-15)
nsubj(be-21, it-19)
nsubj:xsubj(say-23, it-19)
advcl:as(equals-32, be-21)
xcomp(be-21, say-23)
nsubj(equals-32, 2-26)
conj:+(2-26, 2-28)
nsubj(equals-32, 2-28)
nmod:at(2-26, 3-30)
advmod(equals-32, o'clock-31)
ccomp(is-12, equals-32)
dobj(equals-32, 4-33)
G[139, 143] [01, 11, 115, 10013, 226, 211, 228, 330, 433, ?1, ?2, ?3, ?4, ?5, ?6, ?7, ?8, ?9, ?10, ?11, ?12, ?13, ?14, ?15, Frege23, It2, Russell25, So1, There8, There11, There9, There22, There20, There11, There11, They2147483647, Thus1, Wherever1, Wherever1, applies3, are12, are12, are23, are21, are10, as5, as5, be21, believed26, books24, classes20, complex8, concept2147483647, concepts5, conceptual22, conceptual11, correctly15, different7, dx23, equals32, etc.12, etc.23, example8, example2, expressed19, expressed20, expressions2147483647, fact12, formal4, function16, functions18, impossible6, is9, is12, it19, it18, it2, it17, it2, it2, just4, just4, name2147483647, name2147483647, nonsensical19, nonsensical20, nonsensical6, nonsensical4, not4, not16, notation23, notation12, number20, number2147483647, number2147483647, o'clock31, object2147483647, objects14, objects2, objects13, objects12, objects12, one11, one2, one14, one17, only13, only10, proper14, proper10, proposition2147483647, pseudo-concept14, pseudo-propositions20, represented9, same2147483647, say23, say8, say5, say19, say8, sign2147483647, signify3, similar17, speak6, that10, thing9, total9, used4, used16, variable26, variable3, variables14, way2147483647, which13, word object2147483647, word result2147483647, words2147483647, y25, zero12]
similar17- ->?9
?5-the->word object2147483647
which13- ->objects12
?14-a->way2147483647
?3- ->?1
?6-the->object2147483647
objects12- ->are10
just4- ->impossible6
Thus1- ->?2
?6-for->?2
nonsensical19- ->pseudo-propositions20
?12-the->proposition2147483647
it2-xsubj->say8
?13-the->words2147483647
dx23-agent : by ->expressed19
pseudo-propositions20-  : are ->?3
?7- ->applies3
There22- ->are23
say8-  : to ->nonsensical6
There11- ->is12
used4-relcl->Wherever1
only10- ->one11
There9- ->are10
number20- ->fact12
?13-to->applies3
?9-  : are ->nonsensical20
?8-the->name2147483647
different7- ->?14
thing9- ->?5
etc.12- ->thing9
not16- ->functions18
228- ->equals32
it17-  : is ->expressed19
be21-as->equals32
only13- ->one14
?9-and->zero12
conceptual11- ->notation12
It2-  : is  : is ->nonsensical6
variable3-  : x ->?8
variable26-  : by ->?10
211- ->objects12
equals32- ->is12
?11- ->signify3
it19-  : would ->be21
complex8- ->?13
?11- ->represented9
There11- ->are12
433- ->equals32
?8- ->?2
objects13-  : ' ->are23
It2-xsubj->say8
fact12- ->applies3
Wherever1-tmod->expressed20
speak6-  : to ->nonsensical4
classes20-or->functions18
one2-  : can  : can ->say5
say23-  : to ->be21
?9-all->expressions2147483647
are23- ->are12
01-  : ' ->objects2
objects12- ->expressed19
say19- ->are23
it17- ->concepts5
function16- ->fact12
correctly15-  : is ->used16
?1- ->concepts5
it2-  : is ->used4
?5- ->used16
are12- ->say5
There20- ->are21
concepts5- ->signify3
that10- ->Wherever1
?12-in->are10
represented9-and->signify3
are21- ->objects14
?2-the->sign2147483647
example8-for->say5
as5- ->nonsensical6
There8- ->is9
it2-  : And  : is  : is ->impossible6
it18-  : is ->expressed20
used16-relcl->Wherever1
one17-  : as  : might ->say19
330-at->226
say8-  : to ->impossible6
it2-  : And  : is ->nonsensical4
?15-a->number2147483647
Frege23- ->variables14
There11- ->are12
it2- ->concepts5
?10-a->name2147483647
?14-in->used4
as5- ->impossible6
objects12-of->?4
Russell25- ->variables14
So1- ->say5
one14- ->115
228-+->226
?11-all->They2147483647
?1-relcl->Wherever1
believed26- ->Frege23
expressed19-relcl->objects12
example2-for : For ->are10
?3-the->word result2147483647
proper14-  : is  : as ->?1
total9- ->?4
formal4- ->concepts5
nonsensical20- ->is9
books24-  : ' ->are23
zero12- ->nonsensical20
etc.23- ->fact12
objects14- ->are12
pseudo-concept14- ->?6
11-  : is ->?15
is9- ->?15
are12- ->say8
Wherever1- ->?1
?10-agent->expressed20
10013-  : '  : or  : or ->objects14
226- ->equals32
it18- ->concepts5
conceptual22- ->notation23
notation12-in : are ->represented9
115- ->equals32
proper10-  : is ->?2
one11- ->zero12
just4- ->nonsensical6
variables14-agent->represented9
functions18-by->variables14
classes20-by->variables14
expressed19- ->it2
?4-of->speak6
?7-The->same2147483647
is12- ->say8
Russell25-and : as ->Frege23
?1-a->concept2147483647
?4-the->number2147483647
o'clock31- ->equals32
notation23-in->expressed20
not4- ->say5
it19-xsubj->say23
y25- ->dx23
it2-xsubj->speak6
------CorefChainz
CHAIN20-["the pseudo-concept object" in sentence 1, "the word ` object ' -LRB- ` thing ' , etc. -RRB-" in sentence 2, "it" in sentence 2, "it" in sentence 3, "it" in sentence 4]
representative mention: "the word ` object ' -LRB- ` thing ' , etc. -RRB-" in sentence 2
CHAIN57-["It" in sentence 12, "it" in sentence 12]
representative mention: "It" in sentence 12
