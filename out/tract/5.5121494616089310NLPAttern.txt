 'Pp' is true if 'p' is false. Therefore, in the proposition 'Pp', when it is true, 'p' is a false proposition. How then can the stroke 'P' make it agree with reality? But in 'Pp' it is not 'P' that negates, it is rather what is common to all the signs of this notation that negate p. That is to say the common rule that governs the construction of 'Pp', 'PPPp', 'Pp C Pp', 'Pp . Pp', etc. etc. (ad inf.). And this common factor mirrors negation.
------CorefChainz
CHAIN12-["the stroke ` P" in sentence 3, "it" in sentence 3, "it" in sentence 4, "it" in sentence 4]
representative mention: "the stroke ` P" in sentence 3
---
Enhanced PLUS PLUS dependencies
---
---
---
---
---
---
---
---
---
---
Enhanced PLUS PLUS dependencies
---
---
qqroot(ROOT-0, true-5)
cop(true-5, is-4)
punct(true-5, `-1)
punct(true-5, '-3)
punct(true-5, .-12)
punct(p-8, `-7)
punct(p-8, '-9)
cop(false-11, is-10)
mark(false-11, if-6)
nsubj(true-5, Pp-2)
nsubj(false-11, p-8)
advcl:if(true-5, false-11)
---
qqroot(ROOT-0, true-5)
cop(true-5, is-4)
punct(true-5, `-1)
punct(true-5, '-3)
punct(true-5, .-12)
punct(p-8, `-7)
punct(p-8, '-9)
cop(false-11, is-10)
mark(false-11, if-6)
nsubj(true-5, Pp-2)
nsubj(false-11, p-8)
advcl:if(true-5, false-11)
root(ROOT-0, proposition-21)
case(Pp-7, in-3)
compound(Pp-7, proposition-5)
det(Pp-7, the-4)
punct(Pp-7, `-6)
punct(Pp-7, '-8)
cop(true-13, is-12)
cop(proposition-21, is-18)
det(proposition-21, a-19)
punct(proposition-21, ,-9)
punct(proposition-21, ,-14)
punct(proposition-21, `-15)
punct(proposition-21, '-17)
punct(proposition-21, .-22)
punct(proposition-21, ,-2)
advmod(proposition-21, Therefore-1)
nmod:in(proposition-21, Pp-7)
advmod(true-13, when-10)
nsubj(true-13, it-11)
advcl(proposition-21, true-13)
nsubj(proposition-21, p-16)
amod(proposition-21, false-20)
---
qqroot(ROOT-0, true-5)
cop(true-5, is-4)
punct(true-5, `-1)
punct(true-5, '-3)
punct(true-5, .-12)
punct(p-8, `-7)
punct(p-8, '-9)
cop(false-11, is-10)
mark(false-11, if-6)
nsubj(true-5, Pp-2)
nsubj(false-11, p-8)
advcl:if(true-5, false-11)
root(ROOT-0, proposition-21)
case(Pp-7, in-3)
compound(Pp-7, proposition-5)
det(Pp-7, the-4)
punct(Pp-7, `-6)
punct(Pp-7, '-8)
cop(true-13, is-12)
cop(proposition-21, is-18)
det(proposition-21, a-19)
punct(proposition-21, ,-9)
punct(proposition-21, ,-14)
punct(proposition-21, `-15)
punct(proposition-21, '-17)
punct(proposition-21, .-22)
punct(proposition-21, ,-2)
advmod(proposition-21, Therefore-1)
nmod:in(proposition-21, Pp-7)
advmod(true-13, when-10)
nsubj(true-13, it-11)
advcl(proposition-21, true-13)
nsubj(proposition-21, p-16)
amod(proposition-21, false-20)
root(ROOT-0, make-9)
compound(P-7, stroke-5)
det(P-7, the-4)
punct(P-7, `-6)
punct(P-7, '-8)
aux(make-9, can-3)
punct(make-9, ?-14)
case(reality-13, with-12)
advmod(then-2, How-1)
advmod(make-9, then-2)
nsubj(make-9, P-7)
nsubj(agree-11, it-10)
ccomp(make-9, agree-11)
nmod:with(agree-11, reality-13)
---
qqroot(ROOT-0, true-5)
cop(true-5, is-4)
punct(true-5, `-1)
punct(true-5, '-3)
punct(true-5, .-12)
punct(p-8, `-7)
punct(p-8, '-9)
cop(false-11, is-10)
mark(false-11, if-6)
nsubj(true-5, Pp-2)
nsubj(false-11, p-8)
advcl:if(true-5, false-11)
root(ROOT-0, proposition-21)
case(Pp-7, in-3)
compound(Pp-7, proposition-5)
det(Pp-7, the-4)
punct(Pp-7, `-6)
punct(Pp-7, '-8)
cop(true-13, is-12)
cop(proposition-21, is-18)
det(proposition-21, a-19)
punct(proposition-21, ,-9)
punct(proposition-21, ,-14)
punct(proposition-21, `-15)
punct(proposition-21, '-17)
punct(proposition-21, .-22)
punct(proposition-21, ,-2)
advmod(proposition-21, Therefore-1)
nmod:in(proposition-21, Pp-7)
advmod(true-13, when-10)
nsubj(true-13, it-11)
advcl(proposition-21, true-13)
nsubj(proposition-21, p-16)
amod(proposition-21, false-20)
root(ROOT-0, make-9)
compound(P-7, stroke-5)
det(P-7, the-4)
punct(P-7, `-6)
punct(P-7, '-8)
aux(make-9, can-3)
punct(make-9, ?-14)
case(reality-13, with-12)
advmod(then-2, How-1)
advmod(make-9, then-2)
nsubj(make-9, P-7)
nsubj(agree-11, it-10)
ccomp(make-9, agree-11)
nmod:with(agree-11, reality-13)
root(ROOT-0, P-10)
case(Pp-4, in-2)
punct(Pp-4, `-3)
punct(Pp-4, '-5)
cc(P-10, But-1)
cop(P-10, is-7)
punct(P-10, `-9)
punct(P-10, '-11)
punct(P-10, ,-14)
punct(P-10, .-31)
cop(common-20, is-19)
mark(common-20, rather-17)
case(signs-24, to-21)
det(signs-24, the-23)
case(notation-27, of-25)
det(notation-27, this-26)
nmod:in(P-10, Pp-4)
nsubj(P-10, it-6)
neg(P-10, not-8)
nsubj(negates-13, P-10)
ref(P-10, that-12)
acl:relcl(P-10, negates-13)
nsubj(is-16, it-15)
parataxis(P-10, is-16)
nsubj(common-20, what-18)
advcl:rather(is-16, common-20)
det:predet(signs-24, all-22)
nmod:to(common-20, signs-24)
nsubj(negate-29, signs-24)
nmod:of(signs-24, notation-27)
ref(signs-24, that-28)
acl:relcl(signs-24, negate-29)
dobj(negate-29, p-30)
---
qqroot(ROOT-0, true-5)
cop(true-5, is-4)
punct(true-5, `-1)
punct(true-5, '-3)
punct(true-5, .-12)
punct(p-8, `-7)
punct(p-8, '-9)
cop(false-11, is-10)
mark(false-11, if-6)
nsubj(true-5, Pp-2)
nsubj(false-11, p-8)
advcl:if(true-5, false-11)
root(ROOT-0, proposition-21)
case(Pp-7, in-3)
compound(Pp-7, proposition-5)
det(Pp-7, the-4)
punct(Pp-7, `-6)
punct(Pp-7, '-8)
cop(true-13, is-12)
cop(proposition-21, is-18)
det(proposition-21, a-19)
punct(proposition-21, ,-9)
punct(proposition-21, ,-14)
punct(proposition-21, `-15)
punct(proposition-21, '-17)
punct(proposition-21, .-22)
punct(proposition-21, ,-2)
advmod(proposition-21, Therefore-1)
nmod:in(proposition-21, Pp-7)
advmod(true-13, when-10)
nsubj(true-13, it-11)
advcl(proposition-21, true-13)
nsubj(proposition-21, p-16)
amod(proposition-21, false-20)
root(ROOT-0, make-9)
compound(P-7, stroke-5)
det(P-7, the-4)
punct(P-7, `-6)
punct(P-7, '-8)
aux(make-9, can-3)
punct(make-9, ?-14)
case(reality-13, with-12)
advmod(then-2, How-1)
advmod(make-9, then-2)
nsubj(make-9, P-7)
nsubj(agree-11, it-10)
ccomp(make-9, agree-11)
nmod:with(agree-11, reality-13)
root(ROOT-0, P-10)
case(Pp-4, in-2)
punct(Pp-4, `-3)
punct(Pp-4, '-5)
cc(P-10, But-1)
cop(P-10, is-7)
punct(P-10, `-9)
punct(P-10, '-11)
punct(P-10, ,-14)
punct(P-10, .-31)
cop(common-20, is-19)
mark(common-20, rather-17)
case(signs-24, to-21)
det(signs-24, the-23)
case(notation-27, of-25)
det(notation-27, this-26)
nmod:in(P-10, Pp-4)
nsubj(P-10, it-6)
neg(P-10, not-8)
nsubj(negates-13, P-10)
ref(P-10, that-12)
acl:relcl(P-10, negates-13)
nsubj(is-16, it-15)
parataxis(P-10, is-16)
nsubj(common-20, what-18)
advcl:rather(is-16, common-20)
det:predet(signs-24, all-22)
nmod:to(common-20, signs-24)
nsubj(negate-29, signs-24)
nmod:of(signs-24, notation-27)
ref(signs-24, that-28)
acl:relcl(signs-24, negate-29)
dobj(negate-29, p-30)
root(ROOT-0, is-2)
punct(is-2, .-29)
mark(say-4, to-3)
det(rule-7, the-5)
det(construction-11, the-10)
case(Pp-14, of-12)
punct(Pp-14, `-13)
punct(Pp-14, '-15)
punct(Pp-14, ,-16)
punct(Pp-14, `-17)
punct(Pp-14, '-19)
punct(Pp-14, ,-20)
punct(Pp-14, `-21)
punct(Pp-14, '-25)
punct(Pp-14, ,-26)
punct(Pp-14, `-27)
compound(Pp-24, Pp-22)
compound(Pp-24, C-23)
nsubj(is-2, That-1)
nsubj:xsubj(say-4, That-1)
xcomp(is-2, say-4)
amod(rule-7, common-6)
dobj(say-4, rule-7)
nsubj(governs-9, rule-7)
ref(rule-7, that-8)
acl:relcl(rule-7, governs-9)
dobj(governs-9, construction-11)
nmod:of(construction-11, Pp-14)
dep(Pp-14, PPPp-18)
dep(Pp-14, Pp-24)
dep(Pp-14, Pp-28)
---
qqroot(ROOT-0, true-5)
cop(true-5, is-4)
punct(true-5, `-1)
punct(true-5, '-3)
punct(true-5, .-12)
punct(p-8, `-7)
punct(p-8, '-9)
cop(false-11, is-10)
mark(false-11, if-6)
nsubj(true-5, Pp-2)
nsubj(false-11, p-8)
advcl:if(true-5, false-11)
root(ROOT-0, proposition-21)
case(Pp-7, in-3)
compound(Pp-7, proposition-5)
det(Pp-7, the-4)
punct(Pp-7, `-6)
punct(Pp-7, '-8)
cop(true-13, is-12)
cop(proposition-21, is-18)
det(proposition-21, a-19)
punct(proposition-21, ,-9)
punct(proposition-21, ,-14)
punct(proposition-21, `-15)
punct(proposition-21, '-17)
punct(proposition-21, .-22)
punct(proposition-21, ,-2)
advmod(proposition-21, Therefore-1)
nmod:in(proposition-21, Pp-7)
advmod(true-13, when-10)
nsubj(true-13, it-11)
advcl(proposition-21, true-13)
nsubj(proposition-21, p-16)
amod(proposition-21, false-20)
root(ROOT-0, make-9)
compound(P-7, stroke-5)
det(P-7, the-4)
punct(P-7, `-6)
punct(P-7, '-8)
aux(make-9, can-3)
punct(make-9, ?-14)
case(reality-13, with-12)
advmod(then-2, How-1)
advmod(make-9, then-2)
nsubj(make-9, P-7)
nsubj(agree-11, it-10)
ccomp(make-9, agree-11)
nmod:with(agree-11, reality-13)
root(ROOT-0, P-10)
case(Pp-4, in-2)
punct(Pp-4, `-3)
punct(Pp-4, '-5)
cc(P-10, But-1)
cop(P-10, is-7)
punct(P-10, `-9)
punct(P-10, '-11)
punct(P-10, ,-14)
punct(P-10, .-31)
cop(common-20, is-19)
mark(common-20, rather-17)
case(signs-24, to-21)
det(signs-24, the-23)
case(notation-27, of-25)
det(notation-27, this-26)
nmod:in(P-10, Pp-4)
nsubj(P-10, it-6)
neg(P-10, not-8)
nsubj(negates-13, P-10)
ref(P-10, that-12)
acl:relcl(P-10, negates-13)
nsubj(is-16, it-15)
parataxis(P-10, is-16)
nsubj(common-20, what-18)
advcl:rather(is-16, common-20)
det:predet(signs-24, all-22)
nmod:to(common-20, signs-24)
nsubj(negate-29, signs-24)
nmod:of(signs-24, notation-27)
ref(signs-24, that-28)
acl:relcl(signs-24, negate-29)
dobj(negate-29, p-30)
root(ROOT-0, is-2)
punct(is-2, .-29)
mark(say-4, to-3)
det(rule-7, the-5)
det(construction-11, the-10)
case(Pp-14, of-12)
punct(Pp-14, `-13)
punct(Pp-14, '-15)
punct(Pp-14, ,-16)
punct(Pp-14, `-17)
punct(Pp-14, '-19)
punct(Pp-14, ,-20)
punct(Pp-14, `-21)
punct(Pp-14, '-25)
punct(Pp-14, ,-26)
punct(Pp-14, `-27)
compound(Pp-24, Pp-22)
compound(Pp-24, C-23)
nsubj(is-2, That-1)
nsubj:xsubj(say-4, That-1)
xcomp(is-2, say-4)
amod(rule-7, common-6)
dobj(say-4, rule-7)
nsubj(governs-9, rule-7)
ref(rule-7, that-8)
acl:relcl(rule-7, governs-9)
dobj(governs-9, construction-11)
nmod:of(construction-11, Pp-14)
dep(Pp-14, PPPp-18)
dep(Pp-14, Pp-24)
dep(Pp-14, Pp-28)
root(ROOT-0, Pp-1)
punct(Pp-1, '-2)
punct(Pp-1, ,-3)
compound(etc.-5, etc.-4)
compound(inf-8, ad-7)
punct(inf-8, -LRB--6)
punct(inf-8, .-9)
punct(inf-8, -RRB--10)
dep(Pp-1, etc.-5)
dep(etc.-5, inf-8)
---
qqroot(ROOT-0, true-5)
cop(true-5, is-4)
punct(true-5, `-1)
punct(true-5, '-3)
punct(true-5, .-12)
punct(p-8, `-7)
punct(p-8, '-9)
cop(false-11, is-10)
mark(false-11, if-6)
nsubj(true-5, Pp-2)
nsubj(false-11, p-8)
advcl:if(true-5, false-11)
root(ROOT-0, proposition-21)
case(Pp-7, in-3)
compound(Pp-7, proposition-5)
det(Pp-7, the-4)
punct(Pp-7, `-6)
punct(Pp-7, '-8)
cop(true-13, is-12)
cop(proposition-21, is-18)
det(proposition-21, a-19)
punct(proposition-21, ,-9)
punct(proposition-21, ,-14)
punct(proposition-21, `-15)
punct(proposition-21, '-17)
punct(proposition-21, .-22)
punct(proposition-21, ,-2)
advmod(proposition-21, Therefore-1)
nmod:in(proposition-21, Pp-7)
advmod(true-13, when-10)
nsubj(true-13, it-11)
advcl(proposition-21, true-13)
nsubj(proposition-21, p-16)
amod(proposition-21, false-20)
root(ROOT-0, make-9)
compound(P-7, stroke-5)
det(P-7, the-4)
punct(P-7, `-6)
punct(P-7, '-8)
aux(make-9, can-3)
punct(make-9, ?-14)
case(reality-13, with-12)
advmod(then-2, How-1)
advmod(make-9, then-2)
nsubj(make-9, P-7)
nsubj(agree-11, it-10)
ccomp(make-9, agree-11)
nmod:with(agree-11, reality-13)
root(ROOT-0, P-10)
case(Pp-4, in-2)
punct(Pp-4, `-3)
punct(Pp-4, '-5)
cc(P-10, But-1)
cop(P-10, is-7)
punct(P-10, `-9)
punct(P-10, '-11)
punct(P-10, ,-14)
punct(P-10, .-31)
cop(common-20, is-19)
mark(common-20, rather-17)
case(signs-24, to-21)
det(signs-24, the-23)
case(notation-27, of-25)
det(notation-27, this-26)
nmod:in(P-10, Pp-4)
nsubj(P-10, it-6)
neg(P-10, not-8)
nsubj(negates-13, P-10)
ref(P-10, that-12)
acl:relcl(P-10, negates-13)
nsubj(is-16, it-15)
parataxis(P-10, is-16)
nsubj(common-20, what-18)
advcl:rather(is-16, common-20)
det:predet(signs-24, all-22)
nmod:to(common-20, signs-24)
nsubj(negate-29, signs-24)
nmod:of(signs-24, notation-27)
ref(signs-24, that-28)
acl:relcl(signs-24, negate-29)
dobj(negate-29, p-30)
root(ROOT-0, is-2)
punct(is-2, .-29)
mark(say-4, to-3)
det(rule-7, the-5)
det(construction-11, the-10)
case(Pp-14, of-12)
punct(Pp-14, `-13)
punct(Pp-14, '-15)
punct(Pp-14, ,-16)
punct(Pp-14, `-17)
punct(Pp-14, '-19)
punct(Pp-14, ,-20)
punct(Pp-14, `-21)
punct(Pp-14, '-25)
punct(Pp-14, ,-26)
punct(Pp-14, `-27)
compound(Pp-24, Pp-22)
compound(Pp-24, C-23)
nsubj(is-2, That-1)
nsubj:xsubj(say-4, That-1)
xcomp(is-2, say-4)
amod(rule-7, common-6)
dobj(say-4, rule-7)
nsubj(governs-9, rule-7)
ref(rule-7, that-8)
acl:relcl(rule-7, governs-9)
dobj(governs-9, construction-11)
nmod:of(construction-11, Pp-14)
dep(Pp-14, PPPp-18)
dep(Pp-14, Pp-24)
dep(Pp-14, Pp-28)
root(ROOT-0, Pp-1)
punct(Pp-1, '-2)
punct(Pp-1, ,-3)
compound(etc.-5, etc.-4)
compound(inf-8, ad-7)
punct(inf-8, -LRB--6)
punct(inf-8, .-9)
punct(inf-8, -RRB--10)
dep(Pp-1, etc.-5)
dep(etc.-5, inf-8)
root(ROOT-0, .-1)
---
qqroot(ROOT-0, true-5)
cop(true-5, is-4)
punct(true-5, `-1)
punct(true-5, '-3)
punct(true-5, .-12)
punct(p-8, `-7)
punct(p-8, '-9)
cop(false-11, is-10)
mark(false-11, if-6)
nsubj(true-5, Pp-2)
nsubj(false-11, p-8)
advcl:if(true-5, false-11)
root(ROOT-0, proposition-21)
case(Pp-7, in-3)
compound(Pp-7, proposition-5)
det(Pp-7, the-4)
punct(Pp-7, `-6)
punct(Pp-7, '-8)
cop(true-13, is-12)
cop(proposition-21, is-18)
det(proposition-21, a-19)
punct(proposition-21, ,-9)
punct(proposition-21, ,-14)
punct(proposition-21, `-15)
punct(proposition-21, '-17)
punct(proposition-21, .-22)
punct(proposition-21, ,-2)
advmod(proposition-21, Therefore-1)
nmod:in(proposition-21, Pp-7)
advmod(true-13, when-10)
nsubj(true-13, it-11)
advcl(proposition-21, true-13)
nsubj(proposition-21, p-16)
amod(proposition-21, false-20)
root(ROOT-0, make-9)
compound(P-7, stroke-5)
det(P-7, the-4)
punct(P-7, `-6)
punct(P-7, '-8)
aux(make-9, can-3)
punct(make-9, ?-14)
case(reality-13, with-12)
advmod(then-2, How-1)
advmod(make-9, then-2)
nsubj(make-9, P-7)
nsubj(agree-11, it-10)
ccomp(make-9, agree-11)
nmod:with(agree-11, reality-13)
root(ROOT-0, P-10)
case(Pp-4, in-2)
punct(Pp-4, `-3)
punct(Pp-4, '-5)
cc(P-10, But-1)
cop(P-10, is-7)
punct(P-10, `-9)
punct(P-10, '-11)
punct(P-10, ,-14)
punct(P-10, .-31)
cop(common-20, is-19)
mark(common-20, rather-17)
case(signs-24, to-21)
det(signs-24, the-23)
case(notation-27, of-25)
det(notation-27, this-26)
nmod:in(P-10, Pp-4)
nsubj(P-10, it-6)
neg(P-10, not-8)
nsubj(negates-13, P-10)
ref(P-10, that-12)
acl:relcl(P-10, negates-13)
nsubj(is-16, it-15)
parataxis(P-10, is-16)
nsubj(common-20, what-18)
advcl:rather(is-16, common-20)
det:predet(signs-24, all-22)
nmod:to(common-20, signs-24)
nsubj(negate-29, signs-24)
nmod:of(signs-24, notation-27)
ref(signs-24, that-28)
acl:relcl(signs-24, negate-29)
dobj(negate-29, p-30)
root(ROOT-0, is-2)
punct(is-2, .-29)
mark(say-4, to-3)
det(rule-7, the-5)
det(construction-11, the-10)
case(Pp-14, of-12)
punct(Pp-14, `-13)
punct(Pp-14, '-15)
punct(Pp-14, ,-16)
punct(Pp-14, `-17)
punct(Pp-14, '-19)
punct(Pp-14, ,-20)
punct(Pp-14, `-21)
punct(Pp-14, '-25)
punct(Pp-14, ,-26)
punct(Pp-14, `-27)
compound(Pp-24, Pp-22)
compound(Pp-24, C-23)
nsubj(is-2, That-1)
nsubj:xsubj(say-4, That-1)
xcomp(is-2, say-4)
amod(rule-7, common-6)
dobj(say-4, rule-7)
nsubj(governs-9, rule-7)
ref(rule-7, that-8)
acl:relcl(rule-7, governs-9)
dobj(governs-9, construction-11)
nmod:of(construction-11, Pp-14)
dep(Pp-14, PPPp-18)
dep(Pp-14, Pp-24)
dep(Pp-14, Pp-28)
root(ROOT-0, Pp-1)
punct(Pp-1, '-2)
punct(Pp-1, ,-3)
compound(etc.-5, etc.-4)
compound(inf-8, ad-7)
punct(inf-8, -LRB--6)
punct(inf-8, .-9)
punct(inf-8, -RRB--10)
dep(Pp-1, etc.-5)
dep(etc.-5, inf-8)
root(ROOT-0, .-1)
root(ROOT-0, mirrors-5)
det(factor-4, this-2)
cc(mirrors-5, And-1)
punct(mirrors-5, .-7)
amod(factor-4, common-3)
nsubj(mirrors-5, factor-4)
dobj(mirrors-5, negation-6)
G[62, 62] [?1, ?2, ?3, ?4, ?5, ?6, ?7, ?8, C Pp Pp24, How1, P10, PPPp18, Pp4, Pp28, Pp14, Pp2, Pp1, That1, Therefore1, ad inf8, agree11, all22, common20, common6, common3, construction2147483647, etc. etc.5, factor2147483647, false11, false20, governs9, is16, is2, it11, it15, it10, it6, make9, mirrors5, negate29, negates13, negation6, not8, notation2147483647, p16, p30, p8, proposition2147483647, proposition Pp2147483647, reality13, rule2147483647, say4, signs2147483647, stroke P2147483647, that12, that28, that8, then2, true5, true13, what18, when10]
when10- ->true13
P10-  : is ->?1
it15- ->is16
?1-in->?6
negate29-relcl->?3
say4-  : to ->is2
common6- ->?1
Pp14-of->?8
that12- ->P10
false20- ->?6
that28- ->?3
common6- ->?4
p8-  : is ->false11
it15- ->?1
common20-rather->is16
PPPp18- ->Pp14
?2-the->stroke P2147483647
Pp2-  : is ->true5
?6-a->proposition2147483647
common3- ->?5
?4- ->say4
Pp4-in : But ->P10
p30- ->negate29
?3-to->common20
then2-  : can ->make9
?8- ->governs9
false11-if->true5
true13- ->?6
Therefore1- ->?6
?7-this->notation2147483647
?8-the->construction2147483647
Pp28- ->Pp14
reality13-with->agree11
it10- ->agree11
That1- ->is2
it6- ->P10
?2- ->make9
?5-this->factor2147483647
P10- ->negates13
is16- ->P10
ad inf8- ->etc. etc.5
all22-predet->?3
How1- ->then2
agree11- ->make9
etc. etc.5- ->Pp1
governs9-relcl->?4
That1-xsubj->say4
negates13-relcl->P10
what18-  : is ->common20
?3- ->negate29
?7-of->?3
not8- ->P10
C Pp Pp24- ->Pp14
negation6- ->mirrors5
?3-the->signs2147483647
that8- ->?4
?4-the->rule2147483647
?1-the->proposition Pp2147483647
?4- ->governs9
it11-  : is ->true13
?5-  : And ->mirrors5
p16-  : is  : is ->?6
------CorefChainz
CHAIN12-["the stroke ` P" in sentence 3, "it" in sentence 3, "it" in sentence 4, "it" in sentence 4]
representative mention: "the stroke ` P" in sentence 3
