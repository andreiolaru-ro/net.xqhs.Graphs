 For example, the following is a propositional sign: (Frege's 'judgement stroke' '|-' is logically quite meaningless: in the works of Frege (and Russell) it simply indicates that these authors hold the propositions marked with this sign to be true. Thus '|-' is no more a component part of a proposition than is, for instance, the proposition's number. It is quite impossible for a proposition to state that it itself is true.) If the order or the truth-possibilities in a scheme is fixed once and for all by a combinatory rule, then the last column by itself will be an expression of the truth-conditions. If we now write this column as a row, the propositional sign will become '(TT-T) (p,q)' or more explicitly '(TTFT) (p,q)' (The number of places in the left-hand pair of brackets is determined by the number of terms in the right-hand pair.)
------CorefChainz
CHAIN1-["Frege 's" in sentence 1, "Frege" in sentence 1]
representative mention: "Frege 's" in sentence 1
CHAIN44-["the left-hand pair of brackets" in sentence 5, "the right-hand pair" in sentence 5]
representative mention: "the left-hand pair of brackets" in sentence 5
CHAIN46-["then the last column by itself" in sentence 4, "itself" in sentence 4, "we" in sentence 5, "this column" in sentence 5]
representative mention: "then the last column by itself" in sentence 4
CHAIN15-["a proposition" in sentence 2, "the proposition 's" in sentence 2]
representative mention: "the proposition 's" in sentence 2
CHAIN31-["this sign" in sentence 1, "the propositional sign" in sentence 5]
representative mention: "the propositional sign" in sentence 5
---
Enhanced PLUS PLUS dependencies
---
---
---
---
---
---
---
Enhanced PLUS PLUS dependencies
---
---
qqroot(ROOT-0, sign-9)
case(example-2, For-1)
det(following-5, the-4)
cop(sign-9, is-6)
det(sign-9, a-7)
punct(sign-9, ,-3)
punct(sign-9, .-52)
punct(sign-9, :-10)
case(Frege-12, 's-13)
compound(stroke-16, judgement-15)
punct(stroke-16, '-17)
punct(stroke-16, '-18)
punct(stroke-16, --20)
punct(stroke-16, '-21)
punct(stroke-16, -LRB--11)
punct(stroke-16, `-14)
cop(meaningless-25, is-22)
punct(meaningless-25, :-26)
case(works-29, in-27)
det(works-29, the-28)
case(Frege-31, of-30)
cc(Russell-34, and-33)
punct(Russell-34, -LRB--32)
punct(Russell-34, -RRB--35)
det(authors-41, these-40)
mark(hold-42, that-39)
det(propositions-44, the-43)
case(sign-48, with-46)
det(sign-48, this-47)
cop(true-51, be-50)
mark(true-51, to-49)
nmod:for(sign-9, example-2)
nsubj(sign-9, following-5)
amod(sign-9, propositional-8)
nmod:poss(stroke-16, Frege-12)
nsubj(meaningless-25, stroke-16)
dep(stroke-16, |-19)
advmod(meaningless-25, logically-23)
advmod(meaningless-25, quite-24)
parataxis(sign-9, meaningless-25)
nmod:in(indicates-38, works-29)
nmod:of(works-29, Frege-31)
appos(works-29, Russell-34)
nsubj(indicates-38, it-36)
advmod(indicates-38, simply-37)
parataxis(meaningless-25, indicates-38)
nsubj(hold-42, authors-41)
ccomp(indicates-38, hold-42)
dobj(hold-42, propositions-44)
acl(propositions-44, marked-45)
nmod:with(marked-45, sign-48)
advcl:to(hold-42, true-51)
---
qqroot(ROOT-0, sign-9)
case(example-2, For-1)
det(following-5, the-4)
cop(sign-9, is-6)
det(sign-9, a-7)
punct(sign-9, ,-3)
punct(sign-9, .-52)
punct(sign-9, :-10)
case(Frege-12, 's-13)
compound(stroke-16, judgement-15)
punct(stroke-16, '-17)
punct(stroke-16, '-18)
punct(stroke-16, --20)
punct(stroke-16, '-21)
punct(stroke-16, -LRB--11)
punct(stroke-16, `-14)
cop(meaningless-25, is-22)
punct(meaningless-25, :-26)
case(works-29, in-27)
det(works-29, the-28)
case(Frege-31, of-30)
cc(Russell-34, and-33)
punct(Russell-34, -LRB--32)
punct(Russell-34, -RRB--35)
det(authors-41, these-40)
mark(hold-42, that-39)
det(propositions-44, the-43)
case(sign-48, with-46)
det(sign-48, this-47)
cop(true-51, be-50)
mark(true-51, to-49)
nmod:for(sign-9, example-2)
nsubj(sign-9, following-5)
amod(sign-9, propositional-8)
nmod:poss(stroke-16, Frege-12)
nsubj(meaningless-25, stroke-16)
dep(stroke-16, |-19)
advmod(meaningless-25, logically-23)
advmod(meaningless-25, quite-24)
parataxis(sign-9, meaningless-25)
nmod:in(indicates-38, works-29)
nmod:of(works-29, Frege-31)
appos(works-29, Russell-34)
nsubj(indicates-38, it-36)
advmod(indicates-38, simply-37)
parataxis(meaningless-25, indicates-38)
nsubj(hold-42, authors-41)
ccomp(indicates-38, hold-42)
dobj(hold-42, propositions-44)
acl(propositions-44, marked-45)
nmod:with(marked-45, sign-48)
advcl:to(hold-42, true-51)
root(ROOT-0, part-11)
punct(|-3, --4)
punct(|-3, '-5)
punct(|-3, '-2)
compound(part-11, component-10)
cop(part-11, is-6)
det(part-11, a-9)
punct(part-11, .-25)
case(proposition-14, of-12)
det(proposition-14, a-13)
mark(is-16, than-15)
punct(is-16, ,-20)
punct(is-16, ,-17)
case(instance-19, for-18)
case(proposition-22, 's-23)
det(proposition-22, the-21)
advmod(|-3, Thus-1)
nsubj(part-11, |-3)
neg(more-8, no-7)
advmod(part-11, more-8)
nmod:of(part-11, proposition-14)
dep(part-11, is-16)
nmod:for(is-16, instance-19)
nmod:poss(number-24, proposition-22)
nsubj(is-16, number-24)
---
qqroot(ROOT-0, sign-9)
case(example-2, For-1)
det(following-5, the-4)
cop(sign-9, is-6)
det(sign-9, a-7)
punct(sign-9, ,-3)
punct(sign-9, .-52)
punct(sign-9, :-10)
case(Frege-12, 's-13)
compound(stroke-16, judgement-15)
punct(stroke-16, '-17)
punct(stroke-16, '-18)
punct(stroke-16, --20)
punct(stroke-16, '-21)
punct(stroke-16, -LRB--11)
punct(stroke-16, `-14)
cop(meaningless-25, is-22)
punct(meaningless-25, :-26)
case(works-29, in-27)
det(works-29, the-28)
case(Frege-31, of-30)
cc(Russell-34, and-33)
punct(Russell-34, -LRB--32)
punct(Russell-34, -RRB--35)
det(authors-41, these-40)
mark(hold-42, that-39)
det(propositions-44, the-43)
case(sign-48, with-46)
det(sign-48, this-47)
cop(true-51, be-50)
mark(true-51, to-49)
nmod:for(sign-9, example-2)
nsubj(sign-9, following-5)
amod(sign-9, propositional-8)
nmod:poss(stroke-16, Frege-12)
nsubj(meaningless-25, stroke-16)
dep(stroke-16, |-19)
advmod(meaningless-25, logically-23)
advmod(meaningless-25, quite-24)
parataxis(sign-9, meaningless-25)
nmod:in(indicates-38, works-29)
nmod:of(works-29, Frege-31)
appos(works-29, Russell-34)
nsubj(indicates-38, it-36)
advmod(indicates-38, simply-37)
parataxis(meaningless-25, indicates-38)
nsubj(hold-42, authors-41)
ccomp(indicates-38, hold-42)
dobj(hold-42, propositions-44)
acl(propositions-44, marked-45)
nmod:with(marked-45, sign-48)
advcl:to(hold-42, true-51)
root(ROOT-0, part-11)
punct(|-3, --4)
punct(|-3, '-5)
punct(|-3, '-2)
compound(part-11, component-10)
cop(part-11, is-6)
det(part-11, a-9)
punct(part-11, .-25)
case(proposition-14, of-12)
det(proposition-14, a-13)
mark(is-16, than-15)
punct(is-16, ,-20)
punct(is-16, ,-17)
case(instance-19, for-18)
case(proposition-22, 's-23)
det(proposition-22, the-21)
advmod(|-3, Thus-1)
nsubj(part-11, |-3)
neg(more-8, no-7)
advmod(part-11, more-8)
nmod:of(part-11, proposition-14)
dep(part-11, is-16)
nmod:for(is-16, instance-19)
nmod:poss(number-24, proposition-22)
nsubj(is-16, number-24)
root(ROOT-0, impossible-4)
cop(impossible-4, is-2)
punct(impossible-4, .-15)
punct(impossible-4, -RRB--16)
case(proposition-7, for-5)
det(proposition-7, a-6)
case(state-9, to-8)
cop(true-14, is-13)
mark(true-14, that-10)
nsubj(impossible-4, It-1)
advmod(impossible-4, quite-3)
nmod:for(impossible-4, proposition-7)
nmod:to(proposition-7, state-9)
nsubj(true-14, it-11)
nmod:npmod(it-11, itself-12)
ccomp(proposition-7, true-14)
---
qqroot(ROOT-0, sign-9)
case(example-2, For-1)
det(following-5, the-4)
cop(sign-9, is-6)
det(sign-9, a-7)
punct(sign-9, ,-3)
punct(sign-9, .-52)
punct(sign-9, :-10)
case(Frege-12, 's-13)
compound(stroke-16, judgement-15)
punct(stroke-16, '-17)
punct(stroke-16, '-18)
punct(stroke-16, --20)
punct(stroke-16, '-21)
punct(stroke-16, -LRB--11)
punct(stroke-16, `-14)
cop(meaningless-25, is-22)
punct(meaningless-25, :-26)
case(works-29, in-27)
det(works-29, the-28)
case(Frege-31, of-30)
cc(Russell-34, and-33)
punct(Russell-34, -LRB--32)
punct(Russell-34, -RRB--35)
det(authors-41, these-40)
mark(hold-42, that-39)
det(propositions-44, the-43)
case(sign-48, with-46)
det(sign-48, this-47)
cop(true-51, be-50)
mark(true-51, to-49)
nmod:for(sign-9, example-2)
nsubj(sign-9, following-5)
amod(sign-9, propositional-8)
nmod:poss(stroke-16, Frege-12)
nsubj(meaningless-25, stroke-16)
dep(stroke-16, |-19)
advmod(meaningless-25, logically-23)
advmod(meaningless-25, quite-24)
parataxis(sign-9, meaningless-25)
nmod:in(indicates-38, works-29)
nmod:of(works-29, Frege-31)
appos(works-29, Russell-34)
nsubj(indicates-38, it-36)
advmod(indicates-38, simply-37)
parataxis(meaningless-25, indicates-38)
nsubj(hold-42, authors-41)
ccomp(indicates-38, hold-42)
dobj(hold-42, propositions-44)
acl(propositions-44, marked-45)
nmod:with(marked-45, sign-48)
advcl:to(hold-42, true-51)
root(ROOT-0, part-11)
punct(|-3, --4)
punct(|-3, '-5)
punct(|-3, '-2)
compound(part-11, component-10)
cop(part-11, is-6)
det(part-11, a-9)
punct(part-11, .-25)
case(proposition-14, of-12)
det(proposition-14, a-13)
mark(is-16, than-15)
punct(is-16, ,-20)
punct(is-16, ,-17)
case(instance-19, for-18)
case(proposition-22, 's-23)
det(proposition-22, the-21)
advmod(|-3, Thus-1)
nsubj(part-11, |-3)
neg(more-8, no-7)
advmod(part-11, more-8)
nmod:of(part-11, proposition-14)
dep(part-11, is-16)
nmod:for(is-16, instance-19)
nmod:poss(number-24, proposition-22)
nsubj(is-16, number-24)
root(ROOT-0, impossible-4)
cop(impossible-4, is-2)
punct(impossible-4, .-15)
punct(impossible-4, -RRB--16)
case(proposition-7, for-5)
det(proposition-7, a-6)
case(state-9, to-8)
cop(true-14, is-13)
mark(true-14, that-10)
nsubj(impossible-4, It-1)
advmod(impossible-4, quite-3)
nmod:for(impossible-4, proposition-7)
nmod:to(proposition-7, state-9)
nsubj(true-14, it-11)
nmod:npmod(it-11, itself-12)
ccomp(proposition-7, true-14)
root(ROOT-0, expression-30)
cc(order-3, or-4)
det(order-3, the-2)
det(truth-possibilities-6, the-5)
case(scheme-9, in-7)
det(scheme-9, a-8)
auxpass(fixed-11, is-10)
mark(fixed-11, If-1)
case(all-15, for-14)
case(rule-19, by-16)
det(rule-19, a-17)
det(column-24, the-22)
case(itself-26, by-25)
aux(expression-30, will-27)
cop(expression-30, be-28)
det(expression-30, an-29)
punct(expression-30, .-34)
punct(expression-30, ,-20)
case(truth-conditions-33, of-31)
det(truth-conditions-33, the-32)
nsubjpass(fixed-11, order-3)
conj:or(order-3, truth-possibilities-6)
nsubjpass(fixed-11, truth-possibilities-6)
nmod:in(order-3, scheme-9)
advcl:if(expression-30, fixed-11)
advmod(and-13, once-12)
advmod(fixed-11, and-13)
conj(and-13, all-15)
amod(rule-19, combinatory-18)
nmod:by(all-15, rule-19)
advmod(column-24, then-21)
amod(column-24, last-23)
nsubj(expression-30, column-24)
nmod:by(column-24, itself-26)
nmod:of(expression-30, truth-conditions-33)
---
qqroot(ROOT-0, sign-9)
case(example-2, For-1)
det(following-5, the-4)
cop(sign-9, is-6)
det(sign-9, a-7)
punct(sign-9, ,-3)
punct(sign-9, .-52)
punct(sign-9, :-10)
case(Frege-12, 's-13)
compound(stroke-16, judgement-15)
punct(stroke-16, '-17)
punct(stroke-16, '-18)
punct(stroke-16, --20)
punct(stroke-16, '-21)
punct(stroke-16, -LRB--11)
punct(stroke-16, `-14)
cop(meaningless-25, is-22)
punct(meaningless-25, :-26)
case(works-29, in-27)
det(works-29, the-28)
case(Frege-31, of-30)
cc(Russell-34, and-33)
punct(Russell-34, -LRB--32)
punct(Russell-34, -RRB--35)
det(authors-41, these-40)
mark(hold-42, that-39)
det(propositions-44, the-43)
case(sign-48, with-46)
det(sign-48, this-47)
cop(true-51, be-50)
mark(true-51, to-49)
nmod:for(sign-9, example-2)
nsubj(sign-9, following-5)
amod(sign-9, propositional-8)
nmod:poss(stroke-16, Frege-12)
nsubj(meaningless-25, stroke-16)
dep(stroke-16, |-19)
advmod(meaningless-25, logically-23)
advmod(meaningless-25, quite-24)
parataxis(sign-9, meaningless-25)
nmod:in(indicates-38, works-29)
nmod:of(works-29, Frege-31)
appos(works-29, Russell-34)
nsubj(indicates-38, it-36)
advmod(indicates-38, simply-37)
parataxis(meaningless-25, indicates-38)
nsubj(hold-42, authors-41)
ccomp(indicates-38, hold-42)
dobj(hold-42, propositions-44)
acl(propositions-44, marked-45)
nmod:with(marked-45, sign-48)
advcl:to(hold-42, true-51)
root(ROOT-0, part-11)
punct(|-3, --4)
punct(|-3, '-5)
punct(|-3, '-2)
compound(part-11, component-10)
cop(part-11, is-6)
det(part-11, a-9)
punct(part-11, .-25)
case(proposition-14, of-12)
det(proposition-14, a-13)
mark(is-16, than-15)
punct(is-16, ,-20)
punct(is-16, ,-17)
case(instance-19, for-18)
case(proposition-22, 's-23)
det(proposition-22, the-21)
advmod(|-3, Thus-1)
nsubj(part-11, |-3)
neg(more-8, no-7)
advmod(part-11, more-8)
nmod:of(part-11, proposition-14)
dep(part-11, is-16)
nmod:for(is-16, instance-19)
nmod:poss(number-24, proposition-22)
nsubj(is-16, number-24)
root(ROOT-0, impossible-4)
cop(impossible-4, is-2)
punct(impossible-4, .-15)
punct(impossible-4, -RRB--16)
case(proposition-7, for-5)
det(proposition-7, a-6)
case(state-9, to-8)
cop(true-14, is-13)
mark(true-14, that-10)
nsubj(impossible-4, It-1)
advmod(impossible-4, quite-3)
nmod:for(impossible-4, proposition-7)
nmod:to(proposition-7, state-9)
nsubj(true-14, it-11)
nmod:npmod(it-11, itself-12)
ccomp(proposition-7, true-14)
root(ROOT-0, expression-30)
cc(order-3, or-4)
det(order-3, the-2)
det(truth-possibilities-6, the-5)
case(scheme-9, in-7)
det(scheme-9, a-8)
auxpass(fixed-11, is-10)
mark(fixed-11, If-1)
case(all-15, for-14)
case(rule-19, by-16)
det(rule-19, a-17)
det(column-24, the-22)
case(itself-26, by-25)
aux(expression-30, will-27)
cop(expression-30, be-28)
det(expression-30, an-29)
punct(expression-30, .-34)
punct(expression-30, ,-20)
case(truth-conditions-33, of-31)
det(truth-conditions-33, the-32)
nsubjpass(fixed-11, order-3)
conj:or(order-3, truth-possibilities-6)
nsubjpass(fixed-11, truth-possibilities-6)
nmod:in(order-3, scheme-9)
advcl:if(expression-30, fixed-11)
advmod(and-13, once-12)
advmod(fixed-11, and-13)
conj(and-13, all-15)
amod(rule-19, combinatory-18)
nmod:by(all-15, rule-19)
advmod(column-24, then-21)
amod(column-24, last-23)
nsubj(expression-30, column-24)
nmod:by(column-24, itself-26)
nmod:of(expression-30, truth-conditions-33)
root(ROOT-0, become-15)
mark(write-4, If-1)
det(column-6, this-5)
case(row-9, as-7)
det(row-9, a-8)
det(sign-13, the-11)
aux(become-15, will-14)
cc(become-15, or-26)
punct(become-15, .-61)
punct(become-15, -RRB--62)
punct(become-15, '-16)
punct(become-15, '-25)
punct(become-15, ,-10)
punct(TT-T-18, -LRB--17)
punct(TT-T-18, -RRB--19)
punct(p-21, -LRB--20)
punct(p-21, ,-22)
punct(p-21, -RRB--24)
punct(explicitly-28, '-29)
punct(explicitly-28, '-38)
punct(TTFT-31, -LRB--30)
punct(TTFT-31, -RRB--32)
punct(q-36, -LRB--33)
punct(q-36, ,-35)
punct(q-36, -RRB--37)
det(number-41, The-40)
punct(number-41, -LRB--39)
case(places-43, of-42)
case(pair-47, in-44)
det(pair-47, the-45)
case(brackets-49, of-48)
auxpass(determined-51, is-50)
case(number-54, by-52)
det(number-54, the-53)
case(terms-56, of-55)
case(pair-60, in-57)
det(pair-60, the-58)
nsubj(write-4, we-2)
advmod(write-4, now-3)
advcl:if(become-15, write-4)
dobj(write-4, column-6)
nmod:as(write-4, row-9)
amod(sign-13, propositional-12)
nsubj(become-15, sign-13)
dep(become-15, TT-T-18)
dep(become-15, p-21)
appos(p-21, q-23)
advmod(explicitly-28, more-27)
advmod(determined-51, explicitly-28)
dep(explicitly-28, TTFT-31)
dep(q-36, p-34)
dep(explicitly-28, q-36)
nsubjpass(determined-51, number-41)
nmod:of(number-41, places-43)
amod(pair-47, left-hand-46)
nmod:in(places-43, pair-47)
nmod:of(pair-47, brackets-49)
conj:or(become-15, determined-51)
nmod:agent(determined-51, number-54)
nmod:of(number-54, terms-56)
amod(pair-60, right-hand-59)
nmod:in(number-54, pair-60)
G[105, 108] [?1, ?2, ?3, ?4, ?5, ?6, ?7, ?8, ?9, ?10, ?11, ?12, ?13, ?14, ?15, ?16, ?17, ?18, ?19, ?20, ?21, ?22, ?23, ?24, Frege31, Frege12, It1, Russell34, TT-T18, TTFT31, Thus1, all15, and13, authors2147483647, become15, brackets49, column2147483647, column2147483647, combinatory18, component part2147483647, determined51, example2, explicitly28, expression2147483647, fixed11, following2147483647, hold42, impossible4, indicates38, instance19, is16, it36, it11, itself12, itself26, judgement stroke16, last23, left-hand46, logically23, marked45, meaningless25, more8, more27, no7, now3, number2147483647, number2147483647, number24, once12, order2147483647, p21, p34, pair2147483647, pair2147483647, places43, proposition2147483647, proposition2147483647, proposition2147483647, propositional8, propositional12, propositions2147483647, q36, q23, quite3, quite24, right-hand59, row2147483647, rule2147483647, scheme2147483647, sign2147483647, sign2147483647, sign2147483647, simply37, state9, terms56, then21, true51, true14, truth-conditions2147483647, truth-possibilities2147483647, we2, works2147483647, write4, |3, |19]
?8-this->sign2147483647
p34- ->q36
meaningless25- ->?10
propositional12- ->?15
?19-the->truth-conditions2147483647
?10-a->sign2147483647
simply37- ->indicates38
true14- ->?22
Russell34-  : and ->?11
right-hand59- ->?3
marked45- ->?12
?8- ->and13
?3-in->?5
TTFT31- ->itself12
|3- ->?7
?2-of->?7
true14- ->?9
?12-the->propositions2147483647
|19- ->judgement stroke16
?21-  : If ->fixed11
?2-a->proposition2147483647
terms56-of->?5
hold42-  : that ->indicates38
?8-with->marked45
once12- ->and13
example2-for : For ->?10
?16-the->pair2147483647
It1-  : is  : is ->impossible4
itself12-npmod->it11
Thus1- ->|3
?5-the->number2147483647
logically23-  : is ->meaningless25
it36- ->indicates38
?7-a->component part2147483647
?17-the->truth-possibilities2147483647
?14-in->?21
places43-of->?4
quite24- ->meaningless25
q36- ->explicitly28
?1-a->row2147483647
?1-as->write4
?16-in->places43
?20- ->write4
?22-poss : 's ->number24
determined51-or->become15
?18-the->column2147483647
itself26- ->quite24
?22-the->proposition2147483647
combinatory18- ->?23
number24- ->is16
?21-the->order2147483647
TTFT31- ->explicitly28
all15-  : for ->and13
true51-to : be ->hold42
?17- ->fixed11
?24- ->hold42
?14-a->scheme2147483647
?5-agent : by  : is ->determined51
quite3- ->impossible4
fixed11-if->?13
instance19-for->is16
last23- ->?18
is16-  : than  : than ->?7
and13-  : is ->fixed11
example2- ->quite24
?17-or->?21
?9-a->proposition2147483647
?11-in->indicates38
itself26-by->?18
we2-  : If ->write4
?4-The->number2147483647
indicates38- ->meaningless25
?20-this->column2147483647
?6-  : is ->?10
explicitly28- ->determined51
state9-to->?9
p21- ->become15
?6-the->following2147483647
now3- ->write4
?18-  : will  : be ->?13
?13-an->expression2147483647
Frege12-poss : 's ->judgement stroke16
?19-of->?13
no7- ->more8
Frege31-of->?11
propositional8- ->?10
?24-these->authors2147483647
?11-the->works2147483647
?15-  : will ->become15
write4-if->become15
?9-for->impossible4
it11-  : that  : is ->true14
more8-  : is ->?7
then21- ->?18
?12- ->hold42
more27- ->explicitly28
?17- ->quite24
TT-T18- ->become15
left-hand46- ->?16
q23- ->p21
?23-a->rule2147483647
judgement stroke16- ->meaningless25
?3-the->pair2147483647
?3- ->?16
?4- ->determined51
?23-by->all15
?15-the->sign2147483647
brackets49-of->?16
------CorefChainz
CHAIN1-["Frege 's" in sentence 1, "Frege" in sentence 1]
representative mention: "Frege 's" in sentence 1
CHAIN44-["the left-hand pair of brackets" in sentence 5, "the right-hand pair" in sentence 5]
representative mention: "the left-hand pair of brackets" in sentence 5
CHAIN46-["then the last column by itself" in sentence 4, "itself" in sentence 4, "we" in sentence 5, "this column" in sentence 5]
representative mention: "then the last column by itself" in sentence 4
CHAIN15-["a proposition" in sentence 2, "the proposition 's" in sentence 2]
representative mention: "the proposition 's" in sentence 2
CHAIN31-["this sign" in sentence 1, "the propositional sign" in sentence 5]
representative mention: "the propositional sign" in sentence 5
