 It must be manifest in our symbols that it can only be propositions that are combined with one another by 'C', '.', etc. And this is indeed the case, since the symbol in 'p' and 'q' itself presupposes 'C', 'P', etc. If the sign 'p' in 'p C q' does not stand for a complex sign, then it cannot have sense by itself: but in that case the signs 'p C p', 'p . p', etc., which have the same sense as p, must also lack sense. But if 'p C p' has no sense, then 'p C q' cannot have a sense either.
------CorefChainz
CHAIN4-["It" in sentence 1, "it" in sentence 1]
representative mention: "It" in sentence 1
CHAIN22-["the sign" in sentence 4, "it" in sentence 4, "itself" in sentence 4]
representative mention: "the sign" in sentence 4
CHAIN11-["the symbol in ` p ' and ` q ' itself presupposes ` C ' , ` P ' , etc." in sentence 3, "itself" in sentence 3]
representative mention: "the symbol in ` p ' and ` q ' itself presupposes ` C ' , ` P ' , etc." in sentence 3
---
Enhanced PLUS PLUS dependencies
---
---
---
---
---
---
---
---
Enhanced PLUS PLUS dependencies
---
---
qqroot(ROOT-0, manifest-4)
aux(manifest-4, must-2)
cop(manifest-4, be-3)
punct(manifest-4, .-26)
punct(manifest-4, '-27)
case(symbols-7, in-5)
aux(propositions-13, can-10)
cop(propositions-13, be-12)
mark(propositions-13, that-8)
punct(propositions-13, ,-24)
punct(propositions-13, '-25)
auxpass(combined-16, are-15)
case(one-18, with-17)
case(C-22, by-20)
punct(C-22, `-21)
punct(C-22, '-23)
nsubj(manifest-4, It-1)
nmod:poss(symbols-7, our-6)
nmod:in(manifest-4, symbols-7)
nsubj(propositions-13, it-9)
advmod(propositions-13, only-11)
ccomp(manifest-4, propositions-13)
nsubjpass(combined-16, propositions-13)
ref(propositions-13, that-14)
acl:relcl(propositions-13, combined-16)
nmod:with(combined-16, one-18)
dep(one-18, another-19)
nmod:by(another-19, C-22)
---
qqroot(ROOT-0, manifest-4)
aux(manifest-4, must-2)
cop(manifest-4, be-3)
punct(manifest-4, .-26)
punct(manifest-4, '-27)
case(symbols-7, in-5)
aux(propositions-13, can-10)
cop(propositions-13, be-12)
mark(propositions-13, that-8)
punct(propositions-13, ,-24)
punct(propositions-13, '-25)
auxpass(combined-16, are-15)
case(one-18, with-17)
case(C-22, by-20)
punct(C-22, `-21)
punct(C-22, '-23)
nsubj(manifest-4, It-1)
nmod:poss(symbols-7, our-6)
nmod:in(manifest-4, symbols-7)
nsubj(propositions-13, it-9)
advmod(propositions-13, only-11)
ccomp(manifest-4, propositions-13)
nsubjpass(combined-16, propositions-13)
ref(propositions-13, that-14)
acl:relcl(propositions-13, combined-16)
nmod:with(combined-16, one-18)
dep(one-18, another-19)
nmod:by(another-19, C-22)
root(ROOT-0, etc.-2)
punct(etc.-2, .-3)
punct(etc.-2, ,-1)
---
qqroot(ROOT-0, manifest-4)
aux(manifest-4, must-2)
cop(manifest-4, be-3)
punct(manifest-4, .-26)
punct(manifest-4, '-27)
case(symbols-7, in-5)
aux(propositions-13, can-10)
cop(propositions-13, be-12)
mark(propositions-13, that-8)
punct(propositions-13, ,-24)
punct(propositions-13, '-25)
auxpass(combined-16, are-15)
case(one-18, with-17)
case(C-22, by-20)
punct(C-22, `-21)
punct(C-22, '-23)
nsubj(manifest-4, It-1)
nmod:poss(symbols-7, our-6)
nmod:in(manifest-4, symbols-7)
nsubj(propositions-13, it-9)
advmod(propositions-13, only-11)
ccomp(manifest-4, propositions-13)
nsubjpass(combined-16, propositions-13)
ref(propositions-13, that-14)
acl:relcl(propositions-13, combined-16)
nmod:with(combined-16, one-18)
dep(one-18, another-19)
nmod:by(another-19, C-22)
root(ROOT-0, etc.-2)
punct(etc.-2, .-3)
punct(etc.-2, ,-1)
root(ROOT-0, case-6)
cc(case-6, And-1)
cop(case-6, is-3)
det(case-6, the-5)
punct(case-6, ,-7)
punct(case-6, .-30)
case(symbol-10, since-8)
det(symbol-10, the-9)
case(p-13, in-11)
cc(p-13, and-15)
punct(p-13, `-12)
punct(p-13, ,-28)
punct(p-13, '-14)
punct(q-17, `-16)
punct(q-17, '-18)
punct(C-22, '-23)
punct(C-22, ,-24)
punct(C-22, `-25)
punct(C-22, '-27)
punct(C-22, `-21)
nsubj(case-6, this-2)
advmod(case-6, indeed-4)
nmod:since(case-6, symbol-10)
nmod:in(symbol-10, p-13)
dep(presupposes-20, q-17)
nsubj(presupposes-20, itself-19)
nmod:in(symbol-10, presupposes-20)
conj:and(p-13, presupposes-20)
dep(presupposes-20, C-22)
dep(C-22, P-26)
nmod:in(symbol-10, etc.-29)
conj:and(p-13, etc.-29)
---
qqroot(ROOT-0, manifest-4)
aux(manifest-4, must-2)
cop(manifest-4, be-3)
punct(manifest-4, .-26)
punct(manifest-4, '-27)
case(symbols-7, in-5)
aux(propositions-13, can-10)
cop(propositions-13, be-12)
mark(propositions-13, that-8)
punct(propositions-13, ,-24)
punct(propositions-13, '-25)
auxpass(combined-16, are-15)
case(one-18, with-17)
case(C-22, by-20)
punct(C-22, `-21)
punct(C-22, '-23)
nsubj(manifest-4, It-1)
nmod:poss(symbols-7, our-6)
nmod:in(manifest-4, symbols-7)
nsubj(propositions-13, it-9)
advmod(propositions-13, only-11)
ccomp(manifest-4, propositions-13)
nsubjpass(combined-16, propositions-13)
ref(propositions-13, that-14)
acl:relcl(propositions-13, combined-16)
nmod:with(combined-16, one-18)
dep(one-18, another-19)
nmod:by(another-19, C-22)
root(ROOT-0, etc.-2)
punct(etc.-2, .-3)
punct(etc.-2, ,-1)
root(ROOT-0, case-6)
cc(case-6, And-1)
cop(case-6, is-3)
det(case-6, the-5)
punct(case-6, ,-7)
punct(case-6, .-30)
case(symbol-10, since-8)
det(symbol-10, the-9)
case(p-13, in-11)
cc(p-13, and-15)
punct(p-13, `-12)
punct(p-13, ,-28)
punct(p-13, '-14)
punct(q-17, `-16)
punct(q-17, '-18)
punct(C-22, '-23)
punct(C-22, ,-24)
punct(C-22, `-25)
punct(C-22, '-27)
punct(C-22, `-21)
nsubj(case-6, this-2)
advmod(case-6, indeed-4)
nmod:since(case-6, symbol-10)
nmod:in(symbol-10, p-13)
dep(presupposes-20, q-17)
nsubj(presupposes-20, itself-19)
nmod:in(symbol-10, presupposes-20)
conj:and(p-13, presupposes-20)
dep(presupposes-20, C-22)
dep(C-22, P-26)
nmod:in(symbol-10, etc.-29)
conj:and(p-13, etc.-29)
root(ROOT-0, have-25)
det(sign-3, the-2)
punct(p-5, '-12)
punct(p-5, `-4)
punct(p-5, '-6)
case(q-11, in-7)
compound(q-11, p-9)
compound(q-11, C-10)
punct(q-11, '-8)
aux(stand-15, does-13)
mark(stand-15, If-1)
case(sign-19, for-16)
det(sign-19, a-17)
aux(have-25, can-23)
punct(have-25, .-44)
punct(have-25, :-29)
punct(have-25, ,-20)
case(itself-28, by-27)
case(case-33, in-31)
det(case-33, that-32)
case(signs-35, '-36)
det(signs-35, the-34)
compound(p-39, p-37)
compound(p-39, C-38)
punct(p-39, ,-41)
punct(p-39, '-42)
punct(p-39, '-40)
nsubj(stand-15, sign-3)
dep(sign-3, p-5)
nmod:in(p-5, q-11)
neg(stand-15, not-14)
advcl:if(have-25, stand-15)
amod(sign-19, complex-18)
nmod:for(stand-15, sign-19)
advmod(it-22, then-21)
nsubj(have-25, it-22)
neg(have-25, not-24)
dobj(have-25, sense-26)
nmod:by(have-25, itself-28)
dep(have-25, but-30)
nmod:in(but-30, case-33)
nmod:poss(p-39, signs-35)
dep(case-33, p-39)
dep(p-39, p-43)
---
qqroot(ROOT-0, manifest-4)
aux(manifest-4, must-2)
cop(manifest-4, be-3)
punct(manifest-4, .-26)
punct(manifest-4, '-27)
case(symbols-7, in-5)
aux(propositions-13, can-10)
cop(propositions-13, be-12)
mark(propositions-13, that-8)
punct(propositions-13, ,-24)
punct(propositions-13, '-25)
auxpass(combined-16, are-15)
case(one-18, with-17)
case(C-22, by-20)
punct(C-22, `-21)
punct(C-22, '-23)
nsubj(manifest-4, It-1)
nmod:poss(symbols-7, our-6)
nmod:in(manifest-4, symbols-7)
nsubj(propositions-13, it-9)
advmod(propositions-13, only-11)
ccomp(manifest-4, propositions-13)
nsubjpass(combined-16, propositions-13)
ref(propositions-13, that-14)
acl:relcl(propositions-13, combined-16)
nmod:with(combined-16, one-18)
dep(one-18, another-19)
nmod:by(another-19, C-22)
root(ROOT-0, etc.-2)
punct(etc.-2, .-3)
punct(etc.-2, ,-1)
root(ROOT-0, case-6)
cc(case-6, And-1)
cop(case-6, is-3)
det(case-6, the-5)
punct(case-6, ,-7)
punct(case-6, .-30)
case(symbol-10, since-8)
det(symbol-10, the-9)
case(p-13, in-11)
cc(p-13, and-15)
punct(p-13, `-12)
punct(p-13, ,-28)
punct(p-13, '-14)
punct(q-17, `-16)
punct(q-17, '-18)
punct(C-22, '-23)
punct(C-22, ,-24)
punct(C-22, `-25)
punct(C-22, '-27)
punct(C-22, `-21)
nsubj(case-6, this-2)
advmod(case-6, indeed-4)
nmod:since(case-6, symbol-10)
nmod:in(symbol-10, p-13)
dep(presupposes-20, q-17)
nsubj(presupposes-20, itself-19)
nmod:in(symbol-10, presupposes-20)
conj:and(p-13, presupposes-20)
dep(presupposes-20, C-22)
dep(C-22, P-26)
nmod:in(symbol-10, etc.-29)
conj:and(p-13, etc.-29)
root(ROOT-0, have-25)
det(sign-3, the-2)
punct(p-5, '-12)
punct(p-5, `-4)
punct(p-5, '-6)
case(q-11, in-7)
compound(q-11, p-9)
compound(q-11, C-10)
punct(q-11, '-8)
aux(stand-15, does-13)
mark(stand-15, If-1)
case(sign-19, for-16)
det(sign-19, a-17)
aux(have-25, can-23)
punct(have-25, .-44)
punct(have-25, :-29)
punct(have-25, ,-20)
case(itself-28, by-27)
case(case-33, in-31)
det(case-33, that-32)
case(signs-35, '-36)
det(signs-35, the-34)
compound(p-39, p-37)
compound(p-39, C-38)
punct(p-39, ,-41)
punct(p-39, '-42)
punct(p-39, '-40)
nsubj(stand-15, sign-3)
dep(sign-3, p-5)
nmod:in(p-5, q-11)
neg(stand-15, not-14)
advcl:if(have-25, stand-15)
amod(sign-19, complex-18)
nmod:for(stand-15, sign-19)
advmod(it-22, then-21)
nsubj(have-25, it-22)
neg(have-25, not-24)
dobj(have-25, sense-26)
nmod:by(have-25, itself-28)
dep(have-25, but-30)
nmod:in(but-30, case-33)
nmod:poss(p-39, signs-35)
dep(case-33, p-39)
dep(p-39, p-43)
root(ROOT-0, lack-16)
punct(etc.-4, ,-13)
punct(etc.-4, ,-5)
det(sense-10, the-8)
case(p-12, as-11)
aux(lack-16, must-14)
punct(lack-16, '-2)
punct(lack-16, .-18)
punct(lack-16, ,-3)
nsubj(lack-16, p-1)
nsubj(have-7, etc.-4)
nsubj(lack-16, etc.-4)
ref(etc.-4, which-6)
acl:relcl(etc.-4, have-7)
amod(sense-10, same-9)
dobj(have-7, sense-10)
nmod:as(have-7, p-12)
advmod(lack-16, also-15)
dobj(lack-16, sense-17)
---
qqroot(ROOT-0, manifest-4)
aux(manifest-4, must-2)
cop(manifest-4, be-3)
punct(manifest-4, .-26)
punct(manifest-4, '-27)
case(symbols-7, in-5)
aux(propositions-13, can-10)
cop(propositions-13, be-12)
mark(propositions-13, that-8)
punct(propositions-13, ,-24)
punct(propositions-13, '-25)
auxpass(combined-16, are-15)
case(one-18, with-17)
case(C-22, by-20)
punct(C-22, `-21)
punct(C-22, '-23)
nsubj(manifest-4, It-1)
nmod:poss(symbols-7, our-6)
nmod:in(manifest-4, symbols-7)
nsubj(propositions-13, it-9)
advmod(propositions-13, only-11)
ccomp(manifest-4, propositions-13)
nsubjpass(combined-16, propositions-13)
ref(propositions-13, that-14)
acl:relcl(propositions-13, combined-16)
nmod:with(combined-16, one-18)
dep(one-18, another-19)
nmod:by(another-19, C-22)
root(ROOT-0, etc.-2)
punct(etc.-2, .-3)
punct(etc.-2, ,-1)
root(ROOT-0, case-6)
cc(case-6, And-1)
cop(case-6, is-3)
det(case-6, the-5)
punct(case-6, ,-7)
punct(case-6, .-30)
case(symbol-10, since-8)
det(symbol-10, the-9)
case(p-13, in-11)
cc(p-13, and-15)
punct(p-13, `-12)
punct(p-13, ,-28)
punct(p-13, '-14)
punct(q-17, `-16)
punct(q-17, '-18)
punct(C-22, '-23)
punct(C-22, ,-24)
punct(C-22, `-25)
punct(C-22, '-27)
punct(C-22, `-21)
nsubj(case-6, this-2)
advmod(case-6, indeed-4)
nmod:since(case-6, symbol-10)
nmod:in(symbol-10, p-13)
dep(presupposes-20, q-17)
nsubj(presupposes-20, itself-19)
nmod:in(symbol-10, presupposes-20)
conj:and(p-13, presupposes-20)
dep(presupposes-20, C-22)
dep(C-22, P-26)
nmod:in(symbol-10, etc.-29)
conj:and(p-13, etc.-29)
root(ROOT-0, have-25)
det(sign-3, the-2)
punct(p-5, '-12)
punct(p-5, `-4)
punct(p-5, '-6)
case(q-11, in-7)
compound(q-11, p-9)
compound(q-11, C-10)
punct(q-11, '-8)
aux(stand-15, does-13)
mark(stand-15, If-1)
case(sign-19, for-16)
det(sign-19, a-17)
aux(have-25, can-23)
punct(have-25, .-44)
punct(have-25, :-29)
punct(have-25, ,-20)
case(itself-28, by-27)
case(case-33, in-31)
det(case-33, that-32)
case(signs-35, '-36)
det(signs-35, the-34)
compound(p-39, p-37)
compound(p-39, C-38)
punct(p-39, ,-41)
punct(p-39, '-42)
punct(p-39, '-40)
nsubj(stand-15, sign-3)
dep(sign-3, p-5)
nmod:in(p-5, q-11)
neg(stand-15, not-14)
advcl:if(have-25, stand-15)
amod(sign-19, complex-18)
nmod:for(stand-15, sign-19)
advmod(it-22, then-21)
nsubj(have-25, it-22)
neg(have-25, not-24)
dobj(have-25, sense-26)
nmod:by(have-25, itself-28)
dep(have-25, but-30)
nmod:in(but-30, case-33)
nmod:poss(p-39, signs-35)
dep(case-33, p-39)
dep(p-39, p-43)
root(ROOT-0, lack-16)
punct(etc.-4, ,-13)
punct(etc.-4, ,-5)
det(sense-10, the-8)
case(p-12, as-11)
aux(lack-16, must-14)
punct(lack-16, '-2)
punct(lack-16, .-18)
punct(lack-16, ,-3)
nsubj(lack-16, p-1)
nsubj(have-7, etc.-4)
nsubj(lack-16, etc.-4)
ref(etc.-4, which-6)
acl:relcl(etc.-4, have-7)
amod(sense-10, same-9)
dobj(have-7, sense-10)
nmod:as(have-7, p-12)
advmod(lack-16, also-15)
dobj(lack-16, sense-17)
root(ROOT-0, has-8)
compound(p-6, p-4)
compound(p-6, C-5)
punct(p-6, '-3)
cc(has-8, But-1)
punct(has-8, '-7)
punct(has-8, .-24)
punct(has-8, ,-11)
compound(q-16, C-15)
compound(q-16, p-14)
punct(q-16, '-17)
punct(q-16, '-13)
aux(have-20, can-18)
det(sense-22, a-21)
dep(p-6, if-2)
dep(has-8, p-6)
neg(sense-10, no-9)
dobj(has-8, sense-10)
advmod(q-16, then-12)
nsubj(have-20, q-16)
neg(have-20, not-19)
parataxis(has-8, have-20)
dobj(have-20, sense-22)
advmod(have-20, either-23)
G[45, 45] [?1, ?2, ?3, ?4, ?5, ?6, ?7, ?8, C22, C22, C p p39, C p p6, C p q11, C p q16, another19, but30, case2147483647, case2147483647, combined16, etc.2, etc.4, has8, have25, have7, have20, it22, itself28, lack16, manifest4, one18, p13, p5, p12, presupposes20, propositions13, q17, sense2147483647, sense2147483647, sense10, sign2147483647, sign2147483647, signs2147483647, stand15, symbol2147483647, symbols7]
stand15-if->have25
?3-since : And  : is ->?4
propositions13- ->combined16
propositions13-  : that  : can  : can  : can ->manifest4
it22-  : can ->have25
p5- ->?2
?2-  : If ->stand15
presupposes20-and->p13
?8-the->signs2147483647
?4-the->case2147483647
?2-the->sign2147483647
?5- ->have7
but30- ->have25
C22-by->another19
one18-with->combined16
?1-for : does ->stand15
have7-relcl->etc.4
?7-that->case2147483647
itself28-by->have25
C p q16-  : can ->have20
sense10- ->has8
p12-as->have7
?1-a->sign2147483647
another19- ->one18
combined16-relcl : are  : are  : be  : be ->propositions13
symbols7-in : must  : be ->manifest4
C p q11-in->p5
C22- ->?2
?1- ->?3
have20- ->has8
?7-in->but30
C p p39- ->?7
q17- ->presupposes20
?8-poss : ' ->C p p39
C p p6-  : But ->has8
presupposes20-in->?3
?3-the->symbol2147483647
etc.4- ->have7
C22- ->presupposes20
itself28- ->?2
?5-the->sense2147483647
etc.4-  : must ->lack16
p13-in->?3
?6- ->have20
?6-a->sense2147483647
------CorefChainz
CHAIN4-["It" in sentence 1, "it" in sentence 1]
representative mention: "It" in sentence 1
CHAIN22-["the sign" in sentence 4, "it" in sentence 4, "itself" in sentence 4]
representative mention: "the sign" in sentence 4
CHAIN11-["the symbol in ` p ' and ` q ' itself presupposes ` C ' , ` P ' , etc." in sentence 3, "itself" in sentence 3]
representative mention: "the symbol in ` p ' and ` q ' itself presupposes ` C ' , ` P ' , etc." in sentence 3
