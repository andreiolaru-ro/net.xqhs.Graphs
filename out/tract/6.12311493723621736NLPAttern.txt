 The mark of a logical proposition is not general validity. To be general means no more than to be accidentally valid for all things. An ungeneralized proposition can be tautological just as well as a generalized one.
------CorefChainz
The-DT 
mark-NN 
of-IN 
a-DT 
logical-JJ 
proposition-NN 
is-VBZ 
not-RB 
general-JJ 
validity-NN 
.-. 
To-TO 
be-VB 
general-JJ 
means-VBZ 
no-RB 
more-RBR 
than-IN 
to-TO 
be-VB 
accidentally-RB 
valid-JJ 
for-IN 
all-DT 
things-NNS 
.-. 
An-DT 
ungeneralized-JJ 
proposition-NN 
can-MD 
be-VB 
tautological-NN 
just-RB 
as-RB 
well-RB 
as-IN 
a-DT 
generalized-JJ 
one-NN 
.-. 
ROOT 	-> S 	-> NP 	-> NP 	-> DT 	-> The
	 	-> NN 	-> mark
		 	-> PP 	-> IN 	-> of
	 	-> NP 	-> DT 	-> a
	 	-> JJ 	-> logical
	 	-> NN 	-> proposition
				 	-> VP 	-> VBZ 	-> is
	 	-> RB 	-> not
	 	-> ADJP 	-> JJ 	-> general
	 	-> SBAR 	-> S 	-> NP 	-> NP 	-> NN 	-> validity
		 	-> . 	-> .
	 	-> S 	-> VP 	-> TO 	-> To
	 	-> VP 	-> VB 	-> be
	 	-> ADJP 	-> JJ 	-> general
						 	-> VP 	-> VBZ 	-> means
	 	-> ADVP 	-> RB 	-> no
	 	-> RBR 	-> more
	 	-> IN 	-> than
		 	-> S 	-> VP 	-> TO 	-> to
	 	-> VP 	-> VB 	-> be
	 	-> ADJP 	-> ADJP 	-> ADVP 	-> RB 	-> accidentally
		 	-> JJ 	-> valid
		 	-> SBAR 	-> X 	-> ADVP 	-> IN 	-> for
	 	-> DT 	-> all
		 	-> NP 	-> NNS 	-> things
		 	-> . 	-> .
		 	-> S 	-> NP 	-> DT 	-> An
	 	-> JJ 	-> ungeneralized
	 	-> NN 	-> proposition
		 	-> VP 	-> MD 	-> can
	 	-> VP 	-> VB 	-> be
	 	-> NP 	-> NP 	-> NN 	-> tautological
	 	-> RB 	-> just
		 	-> CONJP 	-> RB 	-> as
	 	-> RB 	-> well
	 	-> IN 	-> as
		 	-> NP 	-> DT 	-> a
	 	-> JJ 	-> generalized
	 	-> NN 	-> one
																 	-> . 	-> .
			
Dependensee repr
det(mark-2, The-1)
nsubj(general-9, mark-2)
case(proposition-6, of-3)
det(proposition-6, a-4)
amod(proposition-6, logical-5)
nmod:of(mark-2, proposition-6)
cop(general-9, is-7)
neg(general-9, not-8)
root(ROOT-0, general-9)
nsubj(means-15, validity-10)
nsubj:xsubj(valid-22, validity-10)
mark(general-14, To-12)
cop(general-14, be-13)
acl(validity-10, general-14)
ccomp(general-9, means-15)
neg(more-17, no-16)
advmod(means-15, more-17)
case(more-17, than-18)
mark(valid-22, to-19)
cop(valid-22, be-20)
advmod(valid-22, accidentally-21)
xcomp(means-15, valid-22)
case(all-24, for-23)
dep(things-25, all-24)
dep(tautological-32, things-25)
det(proposition-29, An-27)
amod(proposition-29, ungeneralized-28)
nsubj(tautological-32, proposition-29)
aux(tautological-32, can-30)
cop(tautological-32, be-31)
ccomp(valid-22, tautological-32)
advmod(tautological-32, just-33)
cc(tautological-32, as-34)
mwe(as-34, well-35)
mwe(as-34, as-36)
det(one-39, a-37)
amod(one-39, generalized-38)
ccomp(valid-22, one-39)
conj:and(tautological-32, one-39)
---
Enhanced PLUS PLUS dependencies
---
---
---
---
---
Enhanced PLUS PLUS dependencies
---
---
qqroot(ROOT-0, validity-10)
det(mark-2, The-1)
case(proposition-6, of-3)
det(proposition-6, a-4)
cop(validity-10, is-7)
punct(validity-10, .-11)
nsubj(validity-10, mark-2)
amod(proposition-6, logical-5)
nmod:of(mark-2, proposition-6)
neg(validity-10, not-8)
amod(validity-10, general-9)
---
qqroot(ROOT-0, validity-10)
det(mark-2, The-1)
case(proposition-6, of-3)
det(proposition-6, a-4)
cop(validity-10, is-7)
punct(validity-10, .-11)
nsubj(validity-10, mark-2)
amod(proposition-6, logical-5)
nmod:of(mark-2, proposition-6)
neg(validity-10, not-8)
amod(validity-10, general-9)
root(ROOT-0, means-4)
cop(means-4, be-2)
mark(means-4, To-1)
punct(means-4, .-15)
cop(valid-11, be-9)
mark(valid-11, than-7)
mark(valid-11, to-8)
case(things-14, for-12)
det(things-14, all-13)
amod(means-4, general-3)
neg(more-6, no-5)
dep(means-4, more-6)
advmod(valid-11, accidentally-10)
acl:to(more-6, valid-11)
nmod:for(valid-11, things-14)
---
qqroot(ROOT-0, validity-10)
det(mark-2, The-1)
case(proposition-6, of-3)
det(proposition-6, a-4)
cop(validity-10, is-7)
punct(validity-10, .-11)
nsubj(validity-10, mark-2)
amod(proposition-6, logical-5)
nmod:of(mark-2, proposition-6)
neg(validity-10, not-8)
amod(validity-10, general-9)
root(ROOT-0, means-4)
cop(means-4, be-2)
mark(means-4, To-1)
punct(means-4, .-15)
cop(valid-11, be-9)
mark(valid-11, than-7)
mark(valid-11, to-8)
case(things-14, for-12)
det(things-14, all-13)
amod(means-4, general-3)
neg(more-6, no-5)
dep(means-4, more-6)
advmod(valid-11, accidentally-10)
acl:to(more-6, valid-11)
nmod:for(valid-11, things-14)
root(ROOT-0, tautological-6)
det(proposition-3, An-1)
aux(tautological-6, can-4)
cop(tautological-6, be-5)
punct(tautological-6, .-14)
cc(just-7, as-8)
mwe(as-8, well-9)
mwe(as-8, as-10)
det(one-13, a-11)
amod(proposition-3, ungeneralized-2)
nsubj(tautological-6, proposition-3)
advmod(tautological-6, just-7)
amod(one-13, generalized-12)
advmod(tautological-6, one-13)
conj:and(just-7, one-13)
G[25, 22] [?#1, ?#2, ?#3, ?#4, ?#5, accidentally, as well as, general, general, generalized, just, logical, mark, means, more, no, not, one, proposition, proposition, tautological, things, ungeneralized, valid, validity]
?#1-for->valid
?#2-An->proposition
?#4-a->one
generalized- ->?#4
?#2-  : can  : be  : be ->tautological
?#3- ->validity
ungeneralized- ->?#2
logical- ->?#5
?#4-and->just
?#5-of->?#3
just-  : as well as ->tautological
no- ->more
valid-to : than ->more
?#1-all->things
?#5-a->proposition
?#3-The->mark
general-  : To  : be ->means
not-  : is ->validity
general- ->validity
accidentally-  : be ->valid
more- ->means
?#4- ->tautological
------CorefChainz
