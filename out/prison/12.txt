If the visitor's name is on more than one inmates list at the same time, it will be removed from the most recent list.
------CorefChainz
CHAIN5-["the visitor 's name" in sentence 1, "it" in sentence 1]
representative mention: "the visitor 's name" in sentence 1
If-IN 
the-DT 
visitor-NN 
's-POS 
name-NN 
is-VBZ 
on-IN 
more-JJR 
than-IN 
one-CD 
inmates-NNS 
list-NN 
at-IN 
the-DT 
same-JJ 
time-NN 
,-, 
it-PRP 
will-MD 
be-VB 
removed-VBN 
from-IN 
the-DT 
most-JJS 
recent-JJ 
list-NN 
.-. 
ROOT 	-> S 	-> SBAR 	-> IN 	-> If
	 	-> S 	-> NP 	-> NP 	-> DT 	-> the
	 	-> NN 	-> visitor
	 	-> POS 	-> 's
		 	-> NN 	-> name
		 	-> VP 	-> VBZ 	-> is
	 	-> PP 	-> IN 	-> on
	 	-> NP 	-> QP 	-> JJR 	-> more
	 	-> IN 	-> than
	 	-> CD 	-> one
		 	-> NNS 	-> inmates
			 	-> NP 	-> NP 	-> NN 	-> list
		 	-> PP 	-> IN 	-> at
	 	-> NP 	-> DT 	-> the
	 	-> JJ 	-> same
	 	-> NN 	-> time
							 	-> , 	-> ,
	 	-> NP 	-> PRP 	-> it
		 	-> VP 	-> MD 	-> will
	 	-> VP 	-> VB 	-> be
	 	-> VP 	-> VBN 	-> removed
	 	-> PP 	-> IN 	-> from
	 	-> NP 	-> DT 	-> the
	 	-> JJS 	-> most
	 	-> JJ 	-> recent
	 	-> NN 	-> list
						 	-> . 	-> .
			
Dependensee repr
mark(list-12, If-1)
det(visitor-3, the-2)
nmod:poss(name-5, visitor-3)
case(visitor-3, 's-4)
nsubj(list-12, name-5)
cop(list-12, is-6)
case(inmates-11, on-7)
advmod(one-10, more-8)
mwe(more-8, than-9)
nummod(inmates-11, one-10)
nmod:on(list-12, inmates-11)
advcl(removed-21, list-12)
case(time-16, at-13)
det(time-16, the-14)
amod(time-16, same-15)
nmod:at(list-12, time-16)
nsubjpass(removed-21, it-18)
aux(removed-21, will-19)
auxpass(removed-21, be-20)
root(ROOT-0, removed-21)
case(list-26, from-22)
det(list-26, the-23)
amod(list-26, most-24)
amod(list-26, recent-25)
nmod:from(removed-21, list-26)
---
Enhanced PLUS PLUS dependencies
---
---
qqroot(ROOT-0, removed-21)
mark(list-12, If-1)
det(visitor-3, the-2)
nmod:poss(name-5, visitor-3)
case(visitor-3, 's-4)
nsubj(list-12, name-5)
cop(list-12, is-6)
case(list-12, on-7)
advmod(one-10, more-8)
mwe(more-8, than-9)
nummod(list-12, one-10)
compound(list-12, inmates-11)
advcl:on(removed-21, list-12)
case(time-16, at-13)
det(time-16, the-14)
amod(time-16, same-15)
nmod:at(list-12, time-16)
punct(removed-21, ,-17)
nsubjpass(removed-21, it-18)
aux(removed-21, will-19)
auxpass(removed-21, be-20)
case(list-26, from-22)
det(list-26, the-23)
advmod(recent-25, most-24)
amod(list-26, recent-25)
nmod:from(removed-21, list-26)
punct(removed-21, .-27)
---
Enhanced PLUS PLUS dependencies
---
---
G[17, 17] [?1, ?2, ?3, inmates11, it18, list12, list26, more8, most24, name5, one10, recent25, removed21, same15, than9, time16, visitor3]
same15- ->?2
inmates11- ->list12
?2-the->time16
most24- ->recent25
?1-poss : 's ->name5
?3-the->list26
it18-  : will  : be ->removed21
than9- ->more8
one10- ->list12
?3-from->removed21
?1-the->visitor3
?2-at->list12
it18-==->name5
list12-on->removed21
more8- ->one10
recent25- ->?3
name5-  : If  : is ->list12

[removed21
	(<-on-list12
		(<- -one10<- -more8<- -than9)
		(<-at-?2<- -same15)
		(<-  : If  : is -name5(<-poss : 's -?1)<-==-it18)
		<- -inmates11)
	(<-  : will  : be -*it18)
	<-from-?3<- -recent25<- -most24;
list26<-the-*?3;
time16<-the-*?2;
visitor3<-the-*?1]
